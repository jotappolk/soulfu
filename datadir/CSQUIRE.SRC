//-----------------------------------------------------------------------
int ModelSetup()
  int self
  int hair_color_rgb, hair_texture
  int body_color_rgb, body_color_dull, body_color_gloss
  int limb_color_rgb, limb_color_dull, limb_color_gloss
  int flesh_color, gold_color, steel_color
  int skin_type, hair_color_index, armor_type
  int subtype
  self = FindSelf()


  // Funky shield stuff...
  FUNKY.ShieldUnpress()


  // Figger the skin & hair & clothing colors...
  subtype = (self.eqcol01>>6)
  skin_type = (self.eqcol01>>4)&3
  if(skin_type == 0)
    // Light skin & Light Hair
    flesh_color = "FILE:FLESH.RGB"
    hair_color_index = 10
    hair_texture = "FILE:HAIR2.RGB"
  if(skin_type == 1)
    // Light skin & Dark Hair
    flesh_color = "FILE:FLESH.RGB"
    hair_color_index = 6
    hair_texture = "FILE:HAIR1.RGB"
  if(skin_type == 2)
    // Tanned skin & Dark Hair
    flesh_color = "FILE:TFLESH.RGB"
    hair_color_index = 3
    hair_texture = "FILE:HAIR2.RGB"
  if(skin_type == 3)
    // Dark skin & Dark Hair
    flesh_color = "FILE:DFLESH.RGB"
    hair_color_index = 3
    hair_texture = "FILE:HAIR0.RGB"



  // Figger the colors to actually use...
  hair_color_rgb   = HairColor(hair_color_index)
  body_color_rgb   = RGBColor(self.eqcol01 & 15)
  body_color_dull  = DullColor(self.eqcol01 & 15)
  body_color_gloss = GlossColor(self.eqcol01 & 15)
  limb_color_rgb   = RGBColor(9)
  limb_color_dull  = DullColor(9)
  limb_color_gloss = GlossColor(9)




  // Armor colors based on team...
  if(self.team == TEAM_GOOD || self.team == TEAM_NEUTRAL)
    gold_color = "FILE:GOLD.RGB"
    steel_color = "FILE:STEEL.RGB"
  else
    gold_color = "FILE:DGOLD.RGB"
    steel_color = "FILE:DSTEEL.RGB"


  // Clear the model...
  ModelClear()


  // Animations (bones)
  ModelAssign(self+MODEL_BASE_FILE, "FILE:PLAYERSM.RDY")
  ModelAssign(self+MODEL_BASE_TEX0, "FILE:WHITE.RGB")
  ModelAssign(self+MODEL_BASE_TEX1, "FILE:WHITE.RGB")
  ModelAssign(self+MODEL_BASE_TEX2, "FILE:WHITE.RGB")
  ModelAssign(self+MODEL_BASE_TEX3, "FILE:WHITE.RGB")
  ModelAssign(self+MODEL_BASE_COLOR, WHITE)



  // Body type...
  armor_type = self.eqbody & 252
  if(armor_type >= ITEM_BODY_1 && armor_type <= ITEM_BODY_5)
    // Character is wearing armor...
    if(armor_type == ITEM_BODY_1)
      // Stuff for armor type 1
      ModelAssign(self+MODEL_CHEST_FILE, "FILE:PLRBODY0.RDY")
      ModelAssign(self+MODEL_CHEST_TEX0, flesh_color)
      ModelAssign(self+MODEL_CHEST_TEX1, "FILE:NYELLOW.RGB")
      ModelAssign(self+MODEL_CHEST_TEX2, body_color_gloss)
      ModelAssign(self+MODEL_CHEST_TEX3, "FILE:SHADBOD0.RGB")
      ModelAssign(self+MODEL_CHEST_COLOR, WHITE)

      ModelAssign(self+MODEL_PADS_FILE, "FILE:PLRPADS0.RDY")
      ModelAssign(self+MODEL_PADS_TEX0, "FILE:WHITE.RGB")
      ModelAssign(self+MODEL_PADS_TEX1, "FILE:WHITE.RGB")
      ModelAssign(self+MODEL_PADS_TEX2, "FILE:=TASSLE.RGB")
      ModelAssign(self+MODEL_PADS_TEX3, "FILE:WHITE.RGB")
      ModelAssign(self+MODEL_PADS_COLOR, body_color_rgb)

      ModelAssign(self+MODEL_ARMS_FILE, "FILE:PLRARMS0.RDY")
      ModelAssign(self+MODEL_ARMS_TEX0, flesh_color)
      ModelAssign(self+MODEL_ARMS_TEX1, "FILE:DYELLOW.RGB")
      ModelAssign(self+MODEL_ARMS_TEX2, limb_color_dull)
      ModelAssign(self+MODEL_ARMS_TEX3, "FILE:=ARMOR.RGB")
      ModelAssign(self+MODEL_ARMS_COLOR, WHITE)
    if(armor_type == ITEM_BODY_2)
      // Stuff for armor type 2
      ModelAssign(self+MODEL_CHEST_FILE, "FILE:PLRBODY1.RDY")
      ModelAssign(self+MODEL_CHEST_TEX0, body_color_dull)
      ModelAssign(self+MODEL_CHEST_TEX1, steel_color)
      ModelAssign(self+MODEL_CHEST_TEX2, "FILE:=ARMOR.RGB")
      ModelAssign(self+MODEL_CHEST_TEX3, "FILE:SHADBOD1.RGB")
      ModelAssign(self+MODEL_CHEST_COLOR, body_color_rgb)

      ModelAssign(self+MODEL_ARMS_FILE, "FILE:PLRARMS1.RDY")
      ModelAssign(self+MODEL_ARMS_TEX0, flesh_color)
      ModelAssign(self+MODEL_ARMS_TEX1, steel_color)
      ModelAssign(self+MODEL_ARMS_TEX2, limb_color_dull)
      ModelAssign(self+MODEL_ARMS_TEX3, "FILE:=ARMOR.RGB")
      ModelAssign(self+MODEL_ARMS_COLOR, WHITE)
    if(armor_type == ITEM_BODY_3)
      // Stuff for armor type 3
      ModelAssign(self+MODEL_CHEST_FILE, "FILE:PLRBODY2.RDY")
      ModelAssign(self+MODEL_CHEST_TEX0, body_color_dull)
      ModelAssign(self+MODEL_CHEST_TEX1, steel_color)
      ModelAssign(self+MODEL_CHEST_TEX2, steel_color)
      ModelAssign(self+MODEL_CHEST_TEX3, "FILE:SHADBOD2.RGB")
      ModelAssign(self+MODEL_CHEST_COLOR, body_color_rgb)

      ModelAssign(self+MODEL_PADS_FILE, "FILE:PLRPADS2.RDY")
      ModelAssign(self+MODEL_PADS_TEX0, "FILE:WHITE.RGB")
      ModelAssign(self+MODEL_PADS_TEX1, steel_color)
      ModelAssign(self+MODEL_PADS_TEX2, "FILE:DBLACK.RGB")
      ModelAssign(self+MODEL_PADS_TEX3, "FILE:=ARMOR.RGB")
      ModelAssign(self+MODEL_PADS_COLOR, WHITE)

      ModelAssign(self+MODEL_ARMS_FILE, "FILE:PLRARMS2.RDY")
      ModelAssign(self+MODEL_ARMS_TEX0, flesh_color)
      ModelAssign(self+MODEL_ARMS_TEX1, steel_color)
      ModelAssign(self+MODEL_ARMS_TEX2, limb_color_dull)
      ModelAssign(self+MODEL_ARMS_TEX3, "FILE:=ARMOR.RGB")
      ModelAssign(self+MODEL_ARMS_COLOR, WHITE)
    if(armor_type == ITEM_BODY_4)
      // Stuff for armor type 4
      ModelAssign(self+MODEL_CHEST_FILE, "FILE:PLRBODY3.RDY")
      ModelAssign(self+MODEL_CHEST_TEX0, steel_color)
      ModelAssign(self+MODEL_CHEST_TEX1, steel_color)
      ModelAssign(self+MODEL_CHEST_TEX2, "FILE:DBLACK.RGB")
      ModelAssign(self+MODEL_CHEST_TEX3, "FILE:SHADBOD3.RGB")
      ModelAssign(self+MODEL_CHEST_COLOR, body_color_rgb)

      ModelAssign(self+MODEL_ARMS_FILE, "FILE:PLRARMS3.RDY")
      ModelAssign(self+MODEL_ARMS_TEX0, limb_color_dull)
      ModelAssign(self+MODEL_ARMS_TEX1, steel_color)
      ModelAssign(self+MODEL_ARMS_TEX2, "FILE:=ARMOR.RGB")
      ModelAssign(self+MODEL_ARMS_TEX3, "FILE:SHADBOD3.RGB")
      ModelAssign(self+MODEL_ARMS_COLOR, WHITE)
    if(armor_type == ITEM_BODY_5)
      // Stuff for armor type 5
      ModelAssign(self+MODEL_CHEST_FILE, "FILE:PLRBODY4.RDY")
      ModelAssign(self+MODEL_CHEST_TEX0, flesh_color)
      ModelAssign(self+MODEL_CHEST_TEX1, gold_color)
      ModelAssign(self+MODEL_CHEST_TEX2, "FILE:DBLACK.RGB")
      ModelAssign(self+MODEL_CHEST_TEX3, "FILE:SHADBOD0.RGB")
      ModelAssign(self+MODEL_CHEST_COLOR, WHITE)

      ModelAssign(self+MODEL_ARMS_FILE, "FILE:PLRARMS4.RDY")
      ModelAssign(self+MODEL_ARMS_TEX0, flesh_color)
      ModelAssign(self+MODEL_ARMS_TEX1, limb_color_dull)
      ModelAssign(self+MODEL_ARMS_TEX2, gold_color)
      ModelAssign(self+MODEL_ARMS_TEX3, "FILE:=ARMOR.RGB")
      ModelAssign(self+MODEL_ARMS_COLOR, WHITE)
  else
    // No armor being worn...
    if(subtype < 2)
      // Soldier style shirt...
      ModelAssign(self+MODEL_CHEST_FILE, "FILE:PLRTUNI1.RDY")
      ModelAssign(self+MODEL_CHEST_TEX0, body_color_dull)
      ModelAssign(self+MODEL_CHEST_TEX1, flesh_color)
      ModelAssign(self+MODEL_CHEST_TEX2, "FILE:SHADTUN1.RGB")
      ModelAssign(self+MODEL_CHEST_TEX3, "FILE:=ARMOR.RGB")
      ModelAssign(self+MODEL_CHEST_COLOR, WHITE)

      ModelAssign(self+MODEL_ARMS_FILE, "FILE:PLRARMS0.RDY")
      ModelAssign(self+MODEL_ARMS_TEX0, flesh_color)
      ModelAssign(self+MODEL_ARMS_TEX1, body_color_dull)
      ModelAssign(self+MODEL_ARMS_TEX2, limb_color_dull)
      ModelAssign(self+MODEL_ARMS_TEX3, "FILE:=ARMOR.RGB")
      ModelAssign(self+MODEL_ARMS_COLOR, WHITE)
    else
      // Wizard style shirt...
      ModelAssign(self+MODEL_CHEST_FILE, "FILE:PLRTUNI0.RDY")
      ModelAssign(self+MODEL_CHEST_TEX0, body_color_dull)
      ModelAssign(self+MODEL_CHEST_TEX1, limb_color_dull)
      ModelAssign(self+MODEL_CHEST_TEX2, flesh_color)
      ModelAssign(self+MODEL_CHEST_TEX3, "FILE:SHADTUN0.RGB")
      ModelAssign(self+MODEL_CHEST_COLOR, WHITE)

      ModelAssign(self+MODEL_ARMS_FILE, "FILE:PLRARMS5.RDY")
      ModelAssign(self+MODEL_ARMS_TEX0, flesh_color)
      ModelAssign(self+MODEL_ARMS_TEX1, "FILE:DBLACK.RGB")
      ModelAssign(self+MODEL_ARMS_TEX2, body_color_dull)
      ModelAssign(self+MODEL_ARMS_TEX3, "FILE:=ARMOR.RGB")
      ModelAssign(self+MODEL_ARMS_COLOR, limb_color_rgb)






  if(subtype < 2)
    if(subtype & 1)
      // Scruffy hair, no hat...
      ModelAssign(self+MODEL_HEAD_FILE, "FILE:PLRHEAD3.RDY")
      ModelAssign(self+MODEL_HEAD_TEX0, flesh_color)
      ModelAssign(self+MODEL_HEAD_TEX1, hair_texture)
      ModelAssign(self+MODEL_HEAD_TEX2, "FILE:DBLACK.RGB")
      ModelAssign(self+MODEL_HEAD_TEX3, "FILE:HAIRSHIN.RGB")
      ModelAssign(self+MODEL_HEAD_COLOR, hair_color_rgb)
    else
      if(skin_type == 0 || skin_type == 2)
        // Vampire hair, no hat...
        ModelAssign(self+MODEL_HEAD_FILE, "FILE:PLRHEAD5.RDY")
        ModelAssign(self+MODEL_HEAD_TEX0, flesh_color)
        ModelAssign(self+MODEL_HEAD_TEX1, hair_texture)
        ModelAssign(self+MODEL_HEAD_TEX2, "FILE:DBLACK.RGB")
        ModelAssign(self+MODEL_HEAD_TEX3, "FILE:HAIRSHIN.RGB")
        ModelAssign(self+MODEL_HEAD_COLOR, hair_color_rgb)
      if(skin_type == 1)
        // Politician instead...
        ModelAssign(self+MODEL_HEAD_FILE, "FILE:PLRHEAD2.RDY")
        ModelAssign(self+MODEL_HEAD_TEX0, flesh_color)
        ModelAssign(self+MODEL_HEAD_TEX1, hair_texture)
        ModelAssign(self+MODEL_HEAD_TEX2, "FILE:DBLACK.RGB")
        ModelAssign(self+MODEL_HEAD_TEX3, "FILE:HAIRSHIN.RGB")
        ModelAssign(self+MODEL_HEAD_COLOR, hair_color_rgb)
      if(skin_type == 3)
        // Bald instead...
        ModelAssign(self+MODEL_HEAD_FILE, "FILE:PLRHEAD0.RDY")
        ModelAssign(self+MODEL_HEAD_TEX0, flesh_color)
        ModelAssign(self+MODEL_HEAD_TEX1, hair_texture)
        ModelAssign(self+MODEL_HEAD_TEX2, "FILE:DBLACK.RGB")
        ModelAssign(self+MODEL_HEAD_TEX3, "FILE:HAIRSHIN.RGB")
        ModelAssign(self+MODEL_HEAD_COLOR, hair_color_rgb)
  else
    if(subtype & 1)
      // Hattable head...
      ModelAssign(self+MODEL_HEAD_FILE, "FILE:PLRHEAD6.RDY")
      ModelAssign(self+MODEL_HEAD_TEX0, flesh_color)
      ModelAssign(self+MODEL_HEAD_TEX1, hair_texture)
      ModelAssign(self+MODEL_HEAD_TEX2, "FILE:DBLACK.RGB")
      ModelAssign(self+MODEL_HEAD_TEX3, "FILE:HAIRSHIN.RGB")
      ModelAssign(self+MODEL_HEAD_COLOR, hair_color_rgb)
    else
      // Alternate hattable head...
      ModelAssign(self+MODEL_HEAD_FILE, "FILE:PLRHEAD7.RDY")
      ModelAssign(self+MODEL_HEAD_TEX0, flesh_color)
      ModelAssign(self+MODEL_HEAD_TEX1, hair_texture)
      ModelAssign(self+MODEL_HEAD_TEX2, "FILE:DBLACK.RGB")
      ModelAssign(self+MODEL_HEAD_TEX3, "FILE:HAIRSHIN.RGB")
      ModelAssign(self+MODEL_HEAD_COLOR, hair_color_rgb)

    // Little beanie hat thing...
    ModelAssign(self+MODEL_HAIR_FILE, "FILE:PLRHAT4.RDY")
    ModelAssign(self+MODEL_HAIR_TEX0, body_color_gloss)
    ModelAssign(self+MODEL_HAIR_TEX1, "FILE:DBLACK.RGB")
    ModelAssign(self+MODEL_HAIR_TEX2, limb_color_gloss)
    ModelAssign(self+MODEL_HAIR_TEX3, "FILE:WHITE.RGB")
    ModelAssign(self+MODEL_HAIR_COLOR, limb_color_rgb)


  // Robe thing...
  ModelAssign(self+MODEL_LEGS_FILE, "FILE:PLRPANT4.RDY")
  ModelAssign(self+MODEL_LEGS_TEX0, body_color_dull)
  ModelAssign(self+MODEL_LEGS_TEX1, "FILE:BUCKLE.RGB")
  ModelAssign(self+MODEL_LEGS_TEX2, limb_color_dull)
  ModelAssign(self+MODEL_LEGS_TEX3, "FILE:SHADPNT4.RGB")
  ModelAssign(self+MODEL_LEGS_COLOR, YELLOW)

  ModelAssign(self+MODEL_FEET_FILE, "FILE:PLRFEET1.RDY")
  ModelAssign(self+MODEL_FEET_TEX0, "FILE:WHITE.RGB")
  ModelAssign(self+MODEL_FEET_TEX1, "FILE:WHITE.RGB")
  ModelAssign(self+MODEL_FEET_TEX2, limb_color_dull)
  ModelAssign(self+MODEL_FEET_TEX3, "FILE:WHITE.RGB")
  ModelAssign(self+MODEL_FEET_COLOR, WHITE)


  // Give the character some ears...
  ModelAssign(self+MODEL_MOUTH_FILE, "FILE:PLREARS0.RDY")
  ModelAssign(self+MODEL_MOUTH_TEX0, flesh_color)
  ModelAssign(self+MODEL_MOUTH_TEX1, "FILE:WHITE.RGB")
  ModelAssign(self+MODEL_MOUTH_TEX2, "FILE:WHITE.RGB")
  ModelAssign(self+MODEL_MOUTH_TEX3, "FILE:WHITE.RGB")
  ModelAssign(self+MODEL_MOUTH_COLOR, WHITE)



  // Give the character some eyes...
  ModelAssign(self+MODEL_EYES_FILE, "FILE:PLREYES0.RDY")
  ModelAssign(self+MODEL_EYES_TEX0, "FILE:WHITE.RGB")
  ModelAssign(self+MODEL_EYES_TEX1, "FILE:WHITE.RGB")
  ModelAssign(self+MODEL_EYES_TEX2, "FILE:WHITE.RGB")
  STANDARD.EyeSetup(self+MODEL_EYES_TEX3, self.team)
  ModelAssign(self+MODEL_EYES_COLOR, WHITE)


  // Put weapons in the character's hands...
  STANDARD.ItemModelSetup(MODEL_LEFT_FILE)
  STANDARD.ItemModelSetup(MODEL_RIGHT_FILE)

//-----------------------------------------------------------------------
int DefenseRating()
  int self, subtype
  self = FindSelf()
  subtype = (self.eqcol01>>7)


  if(subtype == 0)
    self.defedge = 2
    self.defbash = 2
    self.defacid = 0
    self.deffire = 0
    self.defice  = 0
    self.defvolt = 2
  else
    self.defedge = 1
    self.defbash = 1
    self.defacid = 1
    self.deffire = 1
    self.defice  = 1
    self.defvolt = 1

  SystemSet(SYS_CLEARDEFENSERATING, 0, 0, 0)
  SystemSet(SYS_ITEMDEFENSERATING, 0, 0, self.eqbody)
  SystemSet(SYS_ITEMDEFENSERATING, 0, 0, self.eqleft)
  SystemSet(SYS_ITEMDEFENSERATING, 0, 0, self.eqright)
  self.defedge = self.defedge + SystemGet(SYS_DEFENSERATING, 0, DAMAGE_EDGE)
  self.defbash = self.defbash + SystemGet(SYS_DEFENSERATING, 0, DAMAGE_BASH)
  self.defacid = self.defacid + SystemGet(SYS_DEFENSERATING, 0, DAMAGE_ACID)
  self.deffire = self.deffire + SystemGet(SYS_DEFENSERATING, 0, DAMAGE_FIRE)
  self.defice  = self.defice  + SystemGet(SYS_DEFENSERATING, 0, DAMAGE_ICE)
  self.defvolt = self.defvolt + SystemGet(SYS_DEFENSERATING, 0, DAMAGE_VOLT)
  self.defwoun = SystemGet(SYS_DEFENSERATING, 0, DAMAGE_WOUND)

//-----------------------------------------------------------------------
int ButtonEvent()
  STANDARD.ButtonEvent()

//-----------------------------------------------------------------------
int Event()
  int self, subtype, temp, pitch
  self = FindSelf()
  subtype = (self.eqcol01>>7)


  // Squires & Apprentices don't take wounds...
  self.hitstap = 0


  if(self.event == EVENT_DAMAGED)
    temp = RollDice(1, 3)
    pitch = 235 + RollDice(1, 40)
    if(self.hits > 0)
      if(temp == 1)
        PlaySound("FILE:-HUBBI01.RAW", pitch, 255)
      if(temp == 2)
        PlaySound("FILE:-HUBBI02.RAW", pitch, 255)
      if(temp == 3)
        PlaySound("FILE:-HUBBI03.RAW", pitch, 255)
    else
      PlaySound("FILE:-HUBBI04.RAW", pitch, 255)

  if(self.event == EVENT_THIRDIARY_TIMER)
    MREGEN.Event()
  STANDARD.Event()
  STANDARD.JumpOutOfWaterEvent()
  if(subtype == 0)
    STANDARD.LevelUpEvent(3, 0, 1, 1, 0)
  else
    STANDARD.LevelUpEvent(2, 2, 0, 0, 1)

//-----------------------------------------------------------------------
int FrameEvent()
  STANDARD.FrameEvent()

//-----------------------------------------------------------------------
int GetName()
  int self, subtype
  self = FindSelf()
  subtype = (self.eqcol01>>7)


  StringClear(NAME_STRING)
  if(subtype == 0)
    StringAppend(NAME_STRING, "Squire", 256)
  else
    StringAppend(NAME_STRING, "Apprentice", 256)
  STANDARD.NameAppendHits()

//-----------------------------------------------------------------------
int AnotherPlayerNeedsHelp()
  // Returns true if another player needs someone else to open a container for him/her
  int self, i, target

  self = FindSelf()

  if(LocalPlayerIsClass(CLASS_HUBBIN)==TRUE)
    return FALSE

  // See if any players don't have enough HP to risk opening potentially trapped containers
  i = 0
  while(i < MAX_CHARACTER)
    target = FindByIndex(i)
    if(target)
      if(target.team == self.team && target.hits <= 5 && target.hits != target.hitsmax)
        return TRUE
    i++
  return FALSE

int ContainerIsSafe(int target, int target_script)
  int self

  self = FindSelf()

  // Determine if the container is safe to be destroyed
  if(LocalPlayerIsClass(CLASS_HUBBIN)==TRUE)
    // If we have a Hubbin, it's legit to check the items' properties
    if(target_script == "FILE:CCRATE.RUN" || target_script == "FILE:CBARREL.RUN")
      if((target.eqcol01 >> 6) != 2)
        return TRUE
    else
      return TRUE
  else
    if(target_script == "FILE:CCRATE.RUN")
      return TRUE
    else
      if(self.hits > 5)
        return TRUE

  return FALSE

//-----------------------------------------------------------------------
int CollectHeart(int attack)
  int self, i, heart, target, monster, target_script, safe_container
  float x, y, position, distance, monsterdistance, heartdistance

  self = FindSelf()

  // Find the nearest heart
  i = 0
  heartdistance = -1.0
  heart = 0
  while(i < MAX_PARTICLE)
    target = FindParticle(i)
    if(target)
      target_script = SystemGet(SYS_PARTICLESCRIPTFILE, 0, i)
      if(target_script == "FILE:PHEART.RUN")
        // A heart has been found
        x = target.x - self.x
        y = target.y - self.y
        distance = x*X + y*y
        if(heartdistance < 0.0 || distance < heartdistance)
          // Store info on the nearest heart
          heartdistance = distance
          heart = target
    i++

  // Find the nearest monster
  i = 0
  monsterdistance = -1.0
  monster = 0
  while(i < MAX_CHARACTER)
    target = FindByIndex(i)
    if(target)
      if(target.hits > 0 && target.team != self.team && target.team != TEAM_NEUTRAL)
        x = self.x - target.x
        y = self.y - target.y
        distance = (x*x) + (y*y)
        if(monsterdistance < 0.0 || distance < monsterdistance)
          monsterdistance = distance
          monster = target
    i++

  if(heart != 0 && self.hits != self.hitsmax)
    if(attack == 1 && monster != 0)
      if(monsterdistance < heartdistance)
        return 0

    // A heart was found. Check other players' stats in case they are more in need.
    i = 0
    while(i < MAX_CHARACTER)
      target = FindByIndex(i)
      if(target)
        if(target.team == self.team && target.hits < self.hits && target.hits != target.hitsmax)
          // Give way to more needy allies
          return 0
      i++

    // If this team member is most in need, he should get it
    self.gotox = heart.x
    self.gotoy = heart.y

    self.aitimer = 1

    if(RollDice(2,50)==20)
      // Also try to jump if we are stuck, and not at the destination yet
      ButtonPress(BUTTON_PRESS_AND_HOLD, BUTTON_SPECIAL1, 10)

    return 1
  else
    if(attack == 1)
      return 0
    if(((self.eqleft >= ITEM_DAGGER && self.eqleft <= (ITEM_WAR_HAMMER+7)) || self.eqright >= ITEM_DAGGER && self.eqright <= (ITEM_WAR_HAMMER+7)))
      // If there aren't any hearts, try destroying crates, barrels and statues if there aren't any immediate monsters
      if(monster)
        x = self.boxsize + monster.boxsize + 4.0
        if(monsterdistance < (x*x))
          // We'll have to give up on hearts, because the baddies are too close and there aren't any hearts freely available
          return 0

      // Look for and attack the nearest crate, barrel or statue, using the old heart variables to store the info.
      i = 0
      distance = -1.0
      heart = 0
      while(i < MAX_CHARACTER)
        target = FindByIndex(i)
        if(target)
          // Is it a crate, barrel or statue?
          target_script = SystemGet(SYS_CHARACTERSCRIPTFILE, 0, i)
          if(target_script == "FILE:CCRATE.RUN" || target_script == "FILE:CBARREL.RUN" || target_script == "FILE:CSTATUE.RUN")
            if(ContainerIsSafe(target, target_script) == TRUE)
              // We'll ignore non-statue containers if the HP is too low. It might be a trap!
              if(target.hits > 0)
                x = self.x - target.x
                y = self.y - target.y
                if(distance < 0.0 || x*x + y*y < distance)
                  distance = x*x + y*y
                  heart = target
        i++

      if(!heart)
        if(monster)
          // Panic and run away from the monsters if HP is very low
          if(self.hits <= 2)
            x = self.boxsize + monster.boxsize + 20.0
            if(monsterdistance < (x*x))
              self.gotox = self.x + self.x - monster.x
              self.gotoy = self.y + self.y - monster.y
              self.aitimer = 1
              return 1
          else
            // Otherwise fight
            return 0
        else
          // Don't bother doing anything if there aren't containers, hearts or monsters
          return 0

      // See if attacking the container is feasible
      x = self.boxsize + heart.boxsize
      y = 0.5 * (self.boxsize + heart.boxsize)
      self.gotox = heart.x
      self.gotoy = heart.y
      self.aitimer = 1

      // Attack the nearest container if it's close enough
      if(distance < (x*x) && distance > (y*y) && GetDirection(heart.x, heart.y) == DIRECTION_FRONT)
        if(self.eqleft >= ITEM_DAGGER && self.eqleft <= (ITEM_WAR_HAMMER+7))
          ButtonPress(BUTTON_PRESS, BUTTON_LEFT, 0)
        if(self.eqright >= ITEM_DAGGER && self.eqright <= (ITEM_WAR_HAMMER+7))
          ButtonPress(BUTTON_PRESS, BUTTON_RIGHT, 0)

      // We don't want the player to get stuck on top of a container
      if(distance < (y*y))
        // Try to let the caller take care of it
        return 0

      if(RollDice(2,50)==15)
        // Also try to jump if we are stuck, and not at the destination yet
        ButtonPress(BUTTON_PRESS_AND_HOLD, BUTTON_SPECIAL1, 10)

  // Jump if we're near bad guys (we might otherwise walk into them!)
  if(monster)
    x = self.boxsize + monster.boxsize + 10.0
    if(monsterdistance < (x*x) && self.eqspec1 == ITEM_JUMP && self.rltimer == 0)
      x = self.x - heart.x
      y = self.y - heart.y
      distance = x*x + y*y
      if(distance > (self.boxsize + heart.boxsize)*(self.boxsize + heart.boxsize))
        // Only jump when we aren't yet at the destination. It's hard to pick hearts up while jumping.
        ButtonPress(BUTTON_PRESS_AND_HOLD, BUTTON_SPECIAL1, 10)
        self.gotox = self.x + self.x - monster.x
        self.gotoy = self.y + self.y - monster.y

  if(!FindPath())
    return 0

  return 1

//-----------------------------------------------------------------------

int AIUseBow()
  int self, target, mount
  float dist, x, y
  self = FindSelf()

  mount = FindByIndex(self.mount)
  if (mount)
    return 0

  if (self.aistate == STANDARD_AISTATE_CHARGE || self.aistate == STANDARD_AISTATE_ATTACK || self.aistate == STANDARD_AISTATE_ATTACK_FOLLOW)
    if (RollDice(1, 10) < 3)
      if ((self.eqleft & 252) == ITEM_BOW && (self.eqleft & 252) == ITEM_LONG_BOW)
        target = FindTarget()
        if(target)
          if(target.team != self.team && target.daction != ACTION_KNOCK_OUT && GetDirection(target.x, target.y) == DIRECTION_FRONT)
            x = self.x - target.x
            y = self.y - target.y
            dist = x*x + y*y
            if (dist > 100.0)
              if (((self.eqleft & 252) == ITEM_BOW && dist < 225.0) || ((self.eqleft & 252) == ITEM_LONG_BOW && dist < 400.0))
                ButtonPress(BUTTON_PRESS, BUTTON_LEFT, 0)
                self.aitimer = 10
                return 1

  return 0

//-----------------------------------------------------------------------

int AIUseSpells()
  int self, target, mount
  float dist, x, y
  self = FindSelf()

  mount = FindByIndex(self.mount)
  if (mount)
    return 0

  if(self.eqleft == ITEM_SPELL_ENCHANT || self.eqleft == ITEM_SPELL_DEFLECT)
    if(RollDice(1, 10) < 5)
      self.target = AcquireTarget(ACQUIRE_SEE_BEHIND | ACQUIRE_SEE_FRIENDLY, NULL, 75.0)
    else
      self.target = FindIndex(self)
    ButtonPress(BUTTON_PRESS, BUTTON_LEFT, 0)
    self.aitimer = 10
    return 1

  return 0

//-----------------------------------------------------------------------

int AIUseShield()
  int self, target, mount
  self = FindSelf()

  mount = FindByIndex(self.mount)
  if (mount)
    return 0

  if (self.aistate == STANDARD_AISTATE_ATTACK || self.aistate == STANDARD_AISTATE_ATTACK_FOLLOW)
    if ((self.eqleft & 248) == ITEM_SHIELD && RollDice(1, 15) < 3)
      target = FindTarget()
      if(target)
        if(target.team != self.team && target.daction != ACTION_KNOCK_OUT && GetDirection(target.x, target.y) == DIRECTION_FRONT)
          ButtonPress(BUTTON_PRESS_AND_HOLD, BUTTON_LEFT, 40)
          self.aitimer = 10
          return 1

  return 0

//-----------------------------------------------------------------------
int AIScript()
  int self, mount, heart, monster, target, i, item, subtype, found, target_script
  int child, ignore_team, ignore_direction
  float x, y, distance, monsterdistance
  self = FindSelf()

  STANDARD.AIUsePotions()

  // !!!BAD!!!
  // !!!BAD!!!  Standardize this (with voice .RAW file)
  // !!!BAD!!!
  if(self.hits <= (self.hitsmax>>1))
    if(self.vflags & VIRTUE_FLAG_HITS)
      if(self.action == ACTION_STAND || self.action == ACTION_WALK)
        found = FALSE
        i = 0
        while(i < 16)
          item = FileReadByte(self+224, i)
          if(item == ITEM_HEAL || item == ITEM_SUPER_HEAL)
            found = TRUE
            i = 16
          i++
        if(!found)
          PlaySound("FILE:-HELPME.RAW", 256, 255)
          child = PEXCLAIM.Effect(self.x, self.y, self.z+5.0, self.boxsize, FALSE)
          if(child)
            child.image = "FILE:=HELP.RGB"
          self.action = ACTION_SPECIAL_4
          self.vflags = self.vflags & (255-VIRTUE_FLAG_HITS)
  if(!(self.vflags & VIRTUE_FLAG_HITS) && self.hits > (self.hitsmax>>1))
      PlaySound("FILE:-BOSSME.RAW", 256, 255)
      self.vflags = VIRTUE_FLAG_HITS
      PEXCLAIM.Effect(self.x, self.y, self.z+5.0, self.boxsize, FALSE)

  if(!(self.vflags & VIRTUE_FLAG_HITS))
    // Equip the potion if able and in urgent need...
    if(!INONE.AutoEquipItem(self, MODEL_RIGHT2_FILE, ITEM_HEAL, ITEM_HEAL, TRUE))
      if(!INONE.AutoEquipItem(self, MODEL_RIGHT2_FILE, ITEM_SUPER_HEAL, ITEM_HEAL, TRUE))
        // Go into heart seeking mode if no potions are available, but health is needed
        if(CollectHeart(0))
          return 0
  else
    // Also find hearts if it isn't an emergency but health is still missing and the room is cleared
    i = 0
    found = FALSE
    while(i < MAX_CHARACTER)
      target = FindByIndex(i)
      if(target)
        if(target.hits > 0 && target.team != self.team && target.team != TEAM_NEUTRAL)
          // Don't count mimics...
          if(SystemGet(SYS_CHARACTERSCRIPTFILE, 0, i) != "FILE:CCHEST.RUN")
            found = TRUE
      i++
    if(found == FALSE)
      if(self.hits != self.hitsmax || AnotherPlayerNeedsHelp())
        if(CollectHeart(0))
          return 0

  if(self.hits != self.hitsmax)
    if(CollectHeart(1))
      return 0

  if (AIUseBow())
    return 0
  if (AIUseSpells())
    return 0
  if (AIUseShield())
    return 0

  STANDARD.AIScript()
  self.aitimer = (self.aitimer>>2) + 1

  return 0

//-----------------------------------------------------------------------
int Refresh()
  // Eye blinks...
  STANDARD.Refresh()

//-----------------------------------------------------------------------
int Spawn()
  int self, i, subtype
  self = FindSelf()
  subtype = (self.eqcol01>>7)

  self.boxsize = 0.85
  self.height = 4
  self.flags = CHAR_GRAVITY_ON | CHAR_CAN_RIDE_MOUNT
  self.sflags = SCRIPT_ALLOW_BODY
  self.vflags = VIRTUE_FLAG_HITS // Used to tell if we've asked for a healing potion yet...
  self.vspin = 1024
  self.timer = 1


  // Starting equipment...
  if(subtype == 0)
    // Squire
    self.eqright = ITEM_SHORT_SWORD
    self.hitsmax = 10
    self.manamax = 0
    self.str = 16
    self.dex = 16
    self.int = 10
  else
    // Apprentice
    self.eqright = ITEM_DAGGER
    if(RollDice(1, 100) < 50)
      self.eqleft = ITEM_SPELL_MISSILE
    else
      self.eqleft = ITEM_SPELL_POISON_CLOUD
    self.hitsmax = 6
    self.manamax = 8
    self.str = 5
    self.dex = 10
    self.int = 16
  self.eqspec1 = ITEM_JUMP
  self.hits = self.hitsmax
  self.mana = self.manamax
  self.level = 1

  MREGEN.Event()
  ModelSetup()
  DefenseRating()

//-----------------------------------------------------------------------
