//-----------------------------------------------------------------------
int GetName()
  int type, damage_type, damage_low, damage_high
  int name, enchantment, binding, dexterity
  int self

  self = FindSelf()
  type = SystemGet(SYS_ITEMINDEX, 0, 0) & 252
  enchantment = SystemGet(SYS_ITEMINDEX, 0, 0) & 3
  damage_type = DAMAGE_EDGE
  damage_low = 1
  damage_high = 3
  dexterity = 0

 

  binding = FindBinding()
  if(binding)
    dexterity = binding.dex

  if(type == ITEM_BOW)
    name = "BOW"
  else
    name = "LONG BOW"
    damage_low++
    damage_high++
  if(enchantment == WEAPON_VARIANT_MAGIC)
    damage_low++
    damage_high++
  if(enchantment == WEAPON_VARIANT_FIRE)
    damage_type = DAMAGE_FIRE
    damage_low = damage_low+2
    damage_high = damage_high+2
  if(enchantment == WEAPON_VARIANT_ICE)
    damage_type = DAMAGE_ICE
    damage_low = damage_low+2
    damage_high = damage_high+2

  damage_low = damage_low + (dexterity/10)
  damage_high = damage_high + (dexterity/10)
  if (binding && binding.class == CLASS_ELF)
    damage_low = damage_low + 1
    damage_high = damage_high + 1
  STANDARD.ItemName(name, NULL, damage_type, damage_low, damage_high, 1, 1)

//-----------------------------------------------------------------------
// Called to put item in character's hand
int ModelSetup()
  int self, grip, type

  grip = SystemGet(SYS_WEAPONGRIP, 0, 0)
  if(grip == MODEL_LEFT_FILE)
    self = FindSelf()
    type = SystemGet(SYS_ITEMINDEX, 0, 0) & 252

    if(type == ITEM_BOW)
      // Normal bow...
      ModelAssign(self+grip, "FILE:BOW.RDY")
      ModelAssign(self+grip+4, "FILE:WOODSHIN.RGB")
      ModelAssign(self+grip+8, "FILE:=PICK.RGB")
      ModelAssign(self+grip+12, "FILE:=HAMMER.RGB")
      ModelAssign(self+grip+16, "FILE:=ARROW.RGB")
      ModelAssign(self+grip+20, WHITE)
    else
      // Long bow...
      ModelAssign(self+grip, "FILE:LBOW.RDY")
      ModelAssign(self+grip+4, "FILE:WOODSHIN.RGB")
      ModelAssign(self+grip+8, "FILE:=HAMMER.RGB")
      ModelAssign(self+grip+12, "FILE:=HAMMER.RGB")
      ModelAssign(self+grip+16, "FILE:=ARROW.RGB")
      ModelAssign(self+grip+20, WHITE)


    // See if we've got a quiver somewhere...
    IQUIVER.ModelTweak()


//-----------------------------------------------------------------------
// Called when attack particle is supposed to be spawned
int FrameEvent()
  int self, dex, type, str
  float speed
  float vx, vy, vz


  self = FindSelf()
  dex = self.dex
  if(dex > 50)
    dex = 50
  str = self.str
  if(str > 50)
    str = 50


  // Aim at the best enemy target...
  type = SystemGet(SYS_ITEMINDEX, 0, 0) & 252
  speed = 1.0 + (0.006*str)
  if(type == ITEM_LONG_BOW)
    speed = speed + 0.6
  AutoAim(speed, 70.0, self.spin, self.team, (dex*3), 4096 + (82*dex), AUTOAIM_CRUNCH_BALLISTIC)
  vx = AutoAim(0.0, 0.0, 0, 0, 0, 0, AUTOAIM_X)
  vy = AutoAim(0.0, 0.0, 0, 0, 0, 0, AUTOAIM_Y)
  vz = AutoAim(0.0, 0.0, 0, 0, 0, 0, AUTOAIM_Z)
  type = SystemGet(SYS_ITEMINDEX, 0, 0) & 7
  PARROW.Effect(type, vx, vy, vz, TRUE)

//-----------------------------------------------------------------------
// Called when item is first used, to start proper animation
int Event()
  int self, grip, reload_time, dex, i, item_type, found, index

  // Modify reload time by dexterity...
  self = FindSelf()
  grip = SystemGet(SYS_WEAPONGRIP, 0, 0)
  reload_time = WEAPON_RELOAD_MEDIUM
  dex = self.dex
  if(dex > 50)
    dex = 50
  reload_time = reload_time - ((dex*reload_time)/50)


  if(self.action == ACTION_WALK || self.action == ACTION_STAND || self.action == ACTION_JUMP || self.action == ACTION_DOUBLE)
    if(grip == MODEL_LEFT_FILE)
      if(self.rltimer == 0)
        // Check for quiver in inventory...
        found = FALSE
        i = 224
        while(i < 246)
          if(i != 240 && i != 241)
            item_type = FileReadByte(self, i)
            if(item_type >= ITEM_QUIVER_10 && item_type <= ITEM_QUIVER_1)
              found = TRUE
              i = 255
          i++


        // Make sure our character's model accurately reflects our quiver/lack thereof...
        index = FindIndex(self)
        SystemSet(SYS_CHARFASTFUNCTION, index, 0, FAST_FUNCTION_MODELSETUP)
        SystemSet(SYS_CHARFASTFUNCTION, index, 0, FAST_FUNCTION_DEFENSERATING)



        if(found)
          // Make sure the model's arrow image is accurate...
          // This is for when the arrow is about to be fired,
          // but before the particle has been spawned...
          ModelAssign(self+MODEL_LEFT_FILE+16, "FILE:=ARROW.RGB")
        else
          ModelAssign(self+MODEL_LEFT_FILE+16, "FILE:=ARROWX.RGB")


        self.action = ACTION_BOW_LEFT
        self.daction = ACTION_STAND
        self.rltimer = reload_time
        ButtonHandled()

//-----------------------------------------------------------------------
int Refresh()
  int enchantment


  if(SystemGet(SYS_MAINGAMEFRAME, 0, 0) & 1)
    enchantment = SystemGet(SYS_ITEMINDEX, 0, 0)&3
    if(enchantment == WEAPON_VARIANT_MAGIC)
      SystemSet(SYS_WEAPONREFRESHFLASH, CYAN, WHITE, 30)
    if(enchantment == WEAPON_VARIANT_FIRE)
      SystemSet(SYS_WEAPONREFRESHFLASH, RED, DARK_RED, 30)
    if(enchantment == WEAPON_VARIANT_ICE)
      SystemSet(SYS_WEAPONREFRESHFLASH, CYAN, BLUE, 30)


//-----------------------------------------------------------------------

