// Boning Model
// Stand.......
// Walk........
// Stun Begin..
// Stun........
// Stun End....
// K O Begin...
// Knock Out...
// K O Stun....
// K O End.....
// Bash Left...
// Bash Right..
// Thrust Left.
// Thrust Right
// Slash Left..
// Slash Right.
// Attack Fail.
// Block Begin.
// Block.......
// Block End...
// Jump Begin..
// Jump........
// Jump End....
// Ride........
// Swim........
// Swim Forward
// Magic.......
// Bow Left....
// Bow Left Arc
// Gonne Right.
// Gonne NoAmmo
// Extra.......
// Special 0...
// Special 1...
// Special 2...
// Special 3...
// Special 4...
// Special 5...
// Special 6...
// Special 7...
// Special 8...
// Special 9...
// Special 10..
// Special 11..
// Special 12..
// Double Begin
// Double......
// Double End..
#define MAX_ACTION 48


#define pick_mode     self.stat00w
#define button_one    self.stat01l
#define button_two    self.stat01h
#define button_three  self.stat02l
#define button_four   self.stat02h
#define button_five   self.stat03l
#define button_six    self.stat03h
#define button_seven  self.stat04l
#define button_eight  self.stat04h
#define zoom_slider   self.stat05l
#define button_ten    self.stat05h
#define openfile      self.int0607
#define frame         self.stat08w
#define pick_part     self.stat09w
#define pick_color    self.stat10w
#define tarx          self.xtra00w
#define tary          self.xtra01w
#define tarz          self.xtra02w
#define frame_slow    self.xtra03w
#define camspinx      self.stat11w
#define camspiny      self.stat12w
#define oldx          self.stat14w
#define oldy          self.stat15w
#define draw_mode     self.stat16h
#define border_mode   self.stat16l
#define move_mode     self.stat17h
#define strip_stage   self.stat17l
#define joint_size    self.stat18h
#define bone_rotate   self.stat18l
#define boneid        self.stat19w
#define skin_border_mode  self.stat20l
#define main_alpha    self.stat20h
#define tex_active    self.stat21l
#define shadvert      self.stat21h
#define texfile0      self.int2223
#define texfile1      self.int2425
#define texfile2      self.int2627
#define texfile3      self.int2829


#define filename      self.string0
#define tex0name      self.string1
#define tex1name      self.string2
#define tex2name      self.string3
#define tex3name      self.string4
#define partname      self.string5
#define externalname  self.string6


#define MODE_POINT    0
#define MODE_TRIANGLE 1
#define MODE_BONE     2
#define MODE_FRAME    3
#define MODE_SKIN     4
#define MODE_SHADOW   5
#define MODE_OTHER    6
#define MODE_FUNKY    7
#define MODE_AUTOSHADOW 8


#define KEYA      4
#define KEYB      5
#define KEYC      6
#define KEYF      9
#define KEYG      10
#define KEYH      11
#define KEYI      12
#define KEYN      17
#define KEYT      23
#define KEYU      24
#define KEYV      25
#define KEYW      26
#define KEYX      27
#define KEYY      28
#define KEYZ      29
#define KEYSPACE  44
#define KEYBRACK  47
#define KEYDELETE 76
#define KEY4      92
#define KEYLEFT   80
#define KEY6      94
#define KEYRIGHT  79
#define KEYPLUS   87
#define KEYRSHIFT 229
#define KEYLSHIFT 225
#define KEYRCTRL  228
#define KEYLCTRL  224
#define KEYF12    69

#define KEY9      97
#define KEYPAGEUP 75
#define KEY3      91
#define KEYPAGEDOWN 78

#define KEY7      95
#define KEYHOME   74
#define KEY1      89
#define KEYEND    77
                          

#define SELECT_ALL        0
#define SELECT_REMOVE     1
#define SELECT_SWAP       2
#define SELECT_INVERT     3
#define SELECT_CONNECTED  4

#define PRECISE_BONE_ROTATE FALSE //TRUE

#define ITEM_YELLOW 13212998
#define ITEM_BROWN   9725968

//-----------------------------------------------------------------------
GnomifyVector(int joint_one, int joint_two)
  int self
  self = FindSelf()
  SystemSet(SYS_GNOMIFYVECTOR, openfile, frame, (joint_two<<16) | (joint_one))

//-----------------------------------------------------------------------
GnomifyJoint(int joint, int percent)
  int self
  self = FindSelf()
  SystemSet(SYS_GNOMIFYJOINT, openfile, frame, (percent<<16) | (joint))

//-----------------------------------------------------------------------
GnomifyEffect()
  // Arms
  GnomifyVector(8, 6)
  GnomifyJoint(8, 18)
  GnomifyJoint(53, 18)
  GnomifyJoint(55, 18)

  GnomifyVector(6, 4)
  GnomifyJoint(8, 18)
  GnomifyJoint(6, 18)
  GnomifyJoint(53, 18)
  GnomifyJoint(55, 18)

  GnomifyVector(9, 7)
  GnomifyJoint(9, 18)
  GnomifyJoint(54, 18)
  GnomifyJoint(56, 18)

  GnomifyVector(7, 5)
  GnomifyJoint(9, 18)
  GnomifyJoint(7, 18)
  GnomifyJoint(54, 18)
  GnomifyJoint(56, 18)



  // Pads
  GnomifyVector(2, 0)
  GnomifyJoint(2, 33)

  GnomifyVector(3, 1)
  GnomifyJoint(3, 33)




  // Legs
  GnomifyVector(12, 14)
  GnomifyJoint(12, 40)
  GnomifyJoint(10, 25)

  GnomifyVector(13, 15)
  GnomifyJoint(13, 40)
  GnomifyJoint(11, 25)




  // Upper Skirt
  GnomifyVector(28, 26)
  GnomifyJoint(22, 20)
  GnomifyJoint(23, 20)
  GnomifyJoint(24, 20)
  GnomifyJoint(25, 20)
  GnomifyJoint(26, 33)
  GnomifyJoint(27, 33)



  // Lower Skirt
  GnomifyJoint(18, 10)
  GnomifyJoint(19, 10)
  GnomifyJoint(20, 10)
  GnomifyJoint(21, 10)



  // Feet
  GnomifyVector(51, 14)
  GnomifyJoint(51, 33)

  GnomifyVector(52, 15)
  GnomifyJoint(52, 33)



  // Head
  GnomifyVector(16, 17)
  GnomifyJoint(16, 18)
  GnomifyJoint(33, 18)
  GnomifyJoint(34, 18)
  GnomifyJoint(35, 18)
  GnomifyJoint(36, 18)



  // Chest
  GnomifyVector(28, 27)
  GnomifyJoint(28, 33)
  GnomifyJoint(16, 33)
  GnomifyJoint(17, 33)
  GnomifyJoint(33, 33)
  GnomifyJoint(34, 33)
  GnomifyJoint(35, 33)
  GnomifyJoint(36, 33)
  GnomifyJoint(0, 33)
  GnomifyJoint(1, 33)
  GnomifyJoint(2, 33)
  GnomifyJoint(3, 33)
  GnomifyJoint(4, 33)
  GnomifyJoint(5, 33)
  GnomifyJoint(6, 33)
  GnomifyJoint(7, 33)
  GnomifyJoint(8, 33)
  GnomifyJoint(9, 33)
  GnomifyJoint(53, 33)
  GnomifyJoint(54, 33)
  GnomifyJoint(55, 33)
  GnomifyJoint(56, 33)

  // Cape
  GnomifyJoint(47, 33)
  GnomifyJoint(48, 33)
  GnomifyJoint(37, 22)
  GnomifyJoint(46, 22)
  GnomifyJoint(38, 22)
  GnomifyJoint(39, 11)
  GnomifyJoint(43, 11)
  GnomifyJoint(44, 11)
  GnomifyJoint(40, 11)


  // Lower quiver...
  GnomifyVector(28, 27)
  GnomifyJoint(57, 65)
  GnomifyJoint(58, 65)

  
  // Pony tail...
  GnomifyJoint(29, 45)
  GnomifyJoint(30, 45)
  GnomifyJoint(31, 45)
  GnomifyJoint(32, 45)

  GnomifyVector(31, 32)
  GnomifyJoint(31, 33)
  GnomifyJoint(30, 33)
  GnomifyJoint(29, 33)

  GnomifyVector(30, 31)
  GnomifyJoint(30, 33)
  GnomifyJoint(29, 33)

  GnomifyVector(29, 30)
  GnomifyJoint(29, 33)



  // Neck
  GnomifyVector(16, 28)
  GnomifyJoint(17, 15)
  GnomifyJoint(28, 8)
  GnomifyJoint(0, 15)
  GnomifyJoint(1, 15)
  GnomifyJoint(2, 15)
  GnomifyJoint(3, 15)
  GnomifyJoint(4, 15)
  GnomifyJoint(5, 15)



//-----------------------------------------------------------------------
AutoShadow(int shadow)
  int self, temp, max_frame, alpha

  self = FindSelf()
  alpha = SystemGet(SYS_MODELSHADOWALPHA, openfile, frame)
  temp = 0
  max_frame = SystemGet(SYS_MODELMAXFRAME, openfile, 0)
  while(temp < max_frame)
    SystemSet(SYS_MODELSHADOWALPHA, openfile, temp, alpha)
    temp++
  SystemSet(SYS_MODELAUTOSHADOW, openfile, frame, shadow)


//-----------------------------------------------------------------------
ScrapColor(int offset, int color)
  // Function fills in given color in MODSCRAP.DAT and assigns
  // it to the model also...
  int write_pos
  write_pos = "FILE:MODSCRAP.DAT" + ((offset - MODEL_BASE_FILE)<<2) + 80
  StringSetValue(write_pos, 0, ((color>>16) & 255))
  StringSetValue(write_pos, 1, ((color>>8) & 255))
  StringSetValue(write_pos, 2, (color&255))
  ModelAssign(FindSelf()+offset+20, color)

//-----------------------------------------------------------------------
ScrapUpdate(int offset)
  // Function fills in strings and files...
  int self
  self = FindSelf()

  offset = (offset - MODEL_BASE_FILE)<<2
  StringClear(partname)
  StringClear(tex0name)
  StringClear(tex1name)
  StringClear(tex2name)
  StringClear(tex3name)
  StringAppend(partname, "FILE:MODSCRAP.DAT"+offset, 16)
  StringAppend(tex0name, "FILE:MODSCRAP.DAT"+offset+16, 16)
  StringAppend(tex1name, "FILE:MODSCRAP.DAT"+offset+32, 16)
  StringAppend(tex2name, "FILE:MODSCRAP.DAT"+offset+48, 16)
  StringAppend(tex3name, "FILE:MODSCRAP.DAT"+offset+64, 16)
  texfile0 = FileOpen(tex0name, FILE_NORMAL)
  texfile1 = FileOpen(tex1name, FILE_NORMAL)
  texfile2 = FileOpen(tex2name, FILE_NORMAL)
  texfile3 = FileOpen(tex3name, FILE_NORMAL)
  StringChopRight(partname, 4)
  StringChopRight(tex0name, 4)
  StringChopRight(tex1name, 4)
  StringChopRight(tex2name, 4)
  StringChopRight(tex3name, 4)

//-----------------------------------------------------------------------
ScrapAssign(int offset)
  // Function assigns models and textures and colors from
  // the MODSCRAP.DAT file...
  int self, scrapfile, tempfile, scrapoffset, color
  self = FindSelf()

  scrapfile = "FILE:MODSCRAP.DAT"
  scrapoffset = (offset - MODEL_BASE_FILE)<<2
  tempfile = FileOpen(scrapfile+scrapoffset, FILE_NORMAL)
  ModelAssign(self+offset, 0)
  if(tempfile != openfile || offset == MODEL_BASE_FILE)
    if(offset == MODEL_BASE_FILE || offset >= MODEL_RIDER_FILE || tempfile == NULL)
      ModelAssign(self+offset, tempfile)
    else
      if(SystemGet(SYS_MODELSARELINKABLE, openfile, tempfile))
        ModelAssign(self+offset, tempfile)
  tempfile = FileOpen(scrapfile+scrapoffset+16, FILE_NORMAL)
  ModelAssign(self+offset+4, tempfile)
  tempfile = FileOpen(scrapfile+scrapoffset+32, FILE_NORMAL)
  ModelAssign(self+offset+8, tempfile)
  tempfile = FileOpen(scrapfile+scrapoffset+48, FILE_NORMAL)
  ModelAssign(self+offset+12, tempfile)
  tempfile = FileOpen(scrapfile+scrapoffset+64, FILE_NORMAL)
  ModelAssign(self+offset+16, tempfile)
  color = FileReadByte(scrapfile, scrapoffset+80) << 16
  color = color | (FileReadByte(scrapfile, scrapoffset+81) << 8)
  color = color | FileReadByte(scrapfile, scrapoffset+82)
  ModelAssign(self+offset+20, color)


//-----------------------------------------------------------------------
int ShadowHelper(float x, float y, int shadow)
  // Function give texture choice and alpha controls...
  int self, alpha, texture, alpha_data, input
  self = FindSelf()


  // Get current information
  texture = SystemGet(SYS_MODELSHADOWTEXTURE, openfile, shadow)
  alpha_data = SystemGet(SYS_MODELSHADOWALPHA, openfile, frame)
  alpha = ((alpha_data >> (shadow<<2)) & 15)
  alpha_data = alpha_data & (65535 - (alpha<<(shadow<<2)))
  alpha = alpha << 4


  // Allow user to change
  input = WindowImage(x, y, 3.0, 1.0, NULL, NULL, 0)
  if(input == 255)
    texture = (texture-1) & 255
  input = WindowImage(x+3.0, y, 3.0, 1.0, NULL, NULL, 0)
  if(input == 255)
    texture = (texture+1) & 255
  WindowString(WHITE, x, y, "-")
  StringClear(String(0))
  StringAppendNumber(String(0), texture, 256)
  WindowString(WHITE, x+3.0-(0.5*StringLength(String(0))), y, String(0))
  WindowString(WHITE, x+5, y, "+")
  alpha = WindowSlider(x+7, y, 7, 1, alpha)


  // Write the new values back
  alpha_data = alpha_data | ((alpha>>4) << (shadow<<2))
  SystemSet(SYS_MODELSHADOWTEXTURE, openfile, shadow, texture)
  SystemSet(SYS_MODELSHADOWALPHA, openfile, frame, alpha_data)

//-----------------------------------------------------------------------
int ActionHelper(float x, float y, int action, int allow_input)
  // Function allows choice of actions...
  int input


  // Spit out the name for the current action...
  // Names are read from the top of this file...
  // 16 bytes apiece...
  if(allow_input)
    input = WindowImage(x, y, 7.0, 1.0, NULL, NULL, 0)
    if(input == 255)
      action--
      if(action < 0)
        action = MAX_ACTION-1
    input = WindowImage(x+7.0, y, 7.0, 1.0, NULL, NULL, 0)
    if(input == 255)
      action++
    if(action >= MAX_ACTION)
      action = 0
    WindowString(WHITE, x, y, "-")
    StringClear(String(0))
    StringAppend(String(0), "FILE:WMODELER.SRC" + (action<<4) + 3, 256)
    While(StringGetValue(String(0), StringLength(String(0))-1) == 46)
      StringChopRight(String(0), 1)
    WindowString(WHITE, x+7.0-(0.5*StringLength(String(0))), y, String(0))
    WindowString(WHITE, x+13, y, "+")
  else
    StringClear(String(0))
    StringAppend(String(0), "FILE:WMODELER.SRC" + (action<<4) + 3, 256)
    While(StringGetValue(String(0), StringLength(String(0))-1) == 46)
      StringChopRight(String(0), 1)
    WindowString(WHITE, x, y, String(0))
  return action

//-----------------------------------------------------------------------
int FlagsHelper(float x, float y, int helpstring, int flags, int flag_count)
  // Function allows choice of flags in a condensed way...
  int nextchar, readpos, current_flag, input, check

  // Spit out the flag string
  current_flag = 0
  readpos = 0
  nextchar = StringGetValue(helpstring, readpos)
  readpos++
  check = 1
  while(nextchar != 0)
    // Check for input...
    input = WindowImage(x+current_flag, y, 1.0, 1.0, NULL, NULL, 0)
    if(input != 0)
      // Show the helpstring...
      WindowMiniList(x+flag_count, y, 14-flag_count, flag_count, (current_flag<<8)+64, helpstring)
    if(flags & check)
      StringSetValue(String(0), current_flag, nextchar)
      if(input == 255)
        flags = flags - check
    else
      StringSetValue(String(0), current_flag, '-')
      if(input == 255)
        flags = flags | check
    check = check << 1
    current_flag++
    while(nextchar != ',' && nextchar != 0)
      nextchar = StringGetValue(helpstring, readpos)
      readpos++
    if(nextchar == ',')
      nextchar = StringGetValue(helpstring, readpos)
      readpos++
  StringSetValue(String(0), current_flag, 0)
  WindowString(WHITE, x, y, String(0))
  return flags

//-----------------------------------------------------------------------
ClearButtons()
  int self
  self = FindSelf()
  button_one = 0
  button_two = 0
  button_three = 0
  button_four = 0
  button_five = 0
  button_six = 0
  button_seven = 0
  button_eight = 0
  button_ten = 0


//-----------------------------------------------------------------------
// Keeps a button held down...
int StickyButton(int value)
  if(value == 255)
    ButtonSound()
    ClearButtons()
  if(value == 250)
    value = 251
  return value


//-----------------------------------------------------------------------
Spawn()
  int self
  self = FindSelf()


  pick_mode = 0
  pick_part = 0
  pick_color = 0
  frame = 0
  ClearButtons()
  StringClear(filename)
  StringClear(partname)
  openfile = NULL
  tarx = 32768
  tary = 32768
  tarz = 32768
  camspinx = 0
  camspiny = 49000
  zoom_slider = 0
  draw_mode = WIN_3D_VERTEX+1
  border_mode = BORDER_CROSS_HAIRS
  skin_border_mode = BORDER_SIMPLE
  move_mode = MOVE_MODE_MOVE
  SystemSet(SYS_MODELSELECT, SELECT_ALL, 0, FALSE)
  strip_stage = 0
  joint_size = 10
  boneid = 0
  main_alpha = 255
  tex_active = 0
  frame_slow = 0
  shadvert = 255

//-----------------------------------------------------------------------
Refresh()
  int self, mode, length, part, curx, cury, tex_flags, tex_alpha
  int frame_stuff, part_offset, temp, weapon_frame
  int working_on_tile
  float cx, cy, cz, tx, ty, tz, zoom, door_value, frustumx, frustumy
  self = FindSelf()
  mode = pick_mode >> 8
  part = pick_part >> 8

  frustumx = SystemGet(SYS_SCREENPARAMS, 0, 2) / 1000.0
  frustumy = SystemGet(SYS_SCREENPARAMS, 0, 3) / 1000.0

  StringClear(NAME_STRING)
  if(openfile == NULL)
    // Opening the file...
    if(CheckExtension(filename, "RDY"))
      openfile = FileOpen(filename, FILE_NORMAL)
      if(openfile)
        pick_mode = MODE_POINT << 8
        // Remember last file opened...
        StringClear("FILE:MODSCRAP.DAT")
        StringAppend("FILE:MODSCRAP.DAT", filename, 16)


        // Fill in strings and file from scrap file...
        ScrapUpdate(MODEL_BASE_FILE)


        // Setup the models and textures from scrap file...
        ScrapAssign(MODEL_BASE_FILE)
        ScrapAssign(MODEL_LEGS_FILE)
        ScrapAssign(MODEL_CHEST_FILE)
        ScrapAssign(MODEL_ARMS_FILE)
        ScrapAssign(MODEL_PADS_FILE)
        ScrapAssign(MODEL_FEET_FILE)
        ScrapAssign(MODEL_HEAD_FILE)
        ScrapAssign(MODEL_HAIR_FILE)
        ScrapAssign(MODEL_EYES_FILE)
        ScrapAssign(MODEL_MOUTH_FILE)
        ScrapAssign(MODEL_RIDER_FILE)
        ScrapAssign(MODEL_LEFT_FILE)
        ScrapAssign(MODEL_RIGHT_FILE)
        ScrapAssign(MODEL_LEFT2_FILE)
        ScrapAssign(MODEL_RIGHT2_FILE)


        // Figure out external linkage
        StringClear(externalname)
        StringAppend(externalname, SystemGet(SYS_MODELEXTERNALFILENAME, openfile, 0), 16)
      else
        LogMessage("ERROR: File not opened...")
        GoPoof(POOF_SELF)
    else
      LogMessage("ERROR: Filename not valid...")
      GoPoof(POOF_SELF)
  else
    // Standard button actions
    if(button_eight == 250)
      ButtonSound()

      LogMessage("INFO:  Modeler export...")      
      SystemSet(SYS_MODELSELECT, SELECT_ALL, 0, FALSE)


      // New force export thingie...  Base models should be first...
      frame_stuff = SystemGet(SYS_MODELMAXFRAME, openfile, 0)
      while(frame_stuff > 0)
        frame_stuff--
        Window3DModel(WIN_3D_BONE_UPDATE+1, MODEL_BASE_FILE, frame_stuff, main_alpha)  // Force
      LogMessage("INFO:  Force thingie complete...")      


      Window3DModel(WIN_3D_BONE_UPDATE+1, MODEL_BASE_FILE, 0, main_alpha)  // Force
      FileOpen(filename, FILE_EXPORT)
      Window3DModel(WIN_3D_BONE_UPDATE+1, MODEL_BASE_FILE, frame, main_alpha)  // Force
      LogMessage("INFO:  Export complete...")      


      StringClear(String(0))
      StringAppend(String(0), filename, 256)
      StringChopRight(String(0), 3)
      StringAppend(String(0), "DDD", 256)
      FileOpen(String(0), FILE_IMPORT)
      UpdateFiles(UPDATE_END)
      UpdateFiles(UPDATE_SDFSAVE)
      LogMessage("INFO:  Update and save complete...")      



      // Hack to make it not crash...  ???
      openfile = NULL
      button_eight = 0
      button_ten = 0
      pick_mode = MODE_POINT << 8
      SystemSet(SYS_MODELSELECT, SELECT_ALL, 0, FALSE)
      LogMessage("INFO:  NoCrashHack complete...")      
      return 0
//      GoPoof(POOF_SELF)
    if(button_ten == 250)
      ButtonSound()
      StringClear(DEBUG_STRING)
      GoPoof(POOF_SELF)


    // Helper thing for tiles...
    working_on_tile = FALSE
    if(StringGetValue(filename, 0) == 'T')
      if(StringGetValue(filename, 1) == 'I')
        if(StringGetValue(filename, 2) == 'L')
          if(StringGetValue(filename, 3) == 'E')
            working_on_tile = TRUE



    // Title bar
    StringClear(String(0))
    StringAppend(String(0), "Modeler:", 256)
    StringAppend(String(0), filename, 256)
    length = StringLength(String(0))
    WindowBorder(TRUE, 7.75-(0.5*length), -15.25, length,  1, BORDER_TITLE)
    WindowString(WHITE, 0.0, -0.1, String(0))


    // Lower side window
    WindowBorder(FALSE, -20.5, 7.75, 14, 6, BORDER_FULL)


    // Standard buttons..
    WindowString(WHITE, 0.0, 0.0, "Tran:")
    main_alpha = WindowSlider(5.0, 0.0, 9, 1, main_alpha)
    WindowString(WHITE, 0.0, 1.0, "Zoom:")
    zoom_slider = WindowSlider(5.0, 1.0, 9, 1, zoom_slider)
    zoom = 0.1+(zoom_slider*0.04)
//    zoom = 0.1+(zoom_slider*0.015625)
    button_eight = ButtonImage(button_eight, 0.0, 2.0, 14.0, 2.0, "SDF Save")
    button_ten = ButtonImage(button_ten, 0.0, 4.0, 14.0, 2.0, "GoPoof")


    // Side window
    WindowBorder(FALSE, -20.5, -6.75, 14, 13, BORDER_FULL)


    // Shared hotkeys
    if(SystemGet(SYS_KEYPRESSED, KEYPLUS, 0))
      SystemSet(SYS_MODELADDFRAME, openfile, frame, TRUE)
      ButtonSound()
    if(SystemGet(SYS_KEYPRESSED, KEYT, 0))
      SystemSet(SYS_MODELTRIANGLELINES, 0, 0, 0)
    if(SystemGet(SYS_KEYPRESSED, KEYLEFT, 0) || SystemGet(SYS_KEYPRESSED, KEY4, 0))
      if(frame > 0)
        SystemSet(SYS_MODELSELECT, SELECT_ALL, 0, FALSE)
        frame--
    if(SystemGet(SYS_KEYPRESSED, KEYRIGHT, 0) || SystemGet(SYS_KEYPRESSED, KEY6, 0))
      if(frame < SystemGet(SYS_MODELMAXFRAME, openfile, 0)-1)
        SystemSet(SYS_MODELSELECT, SELECT_ALL, 0, FALSE)
        frame++
    if(SystemGet(SYS_KEYPRESSED, KEYPAGEUP, 0) || SystemGet(SYS_KEYPRESSED, KEY9, 0))
      temp = 0
      while(temp < 10)
        if(frame > 0)
          SystemSet(SYS_MODELSELECT, SELECT_ALL, 0, FALSE)
          frame--
        temp++
    if(SystemGet(SYS_KEYPRESSED, KEYPAGEDOWN, 0) || SystemGet(SYS_KEYPRESSED, KEY3, 0))
      temp = 0
      while(temp < 10)
        if(frame < SystemGet(SYS_MODELMAXFRAME, openfile, 0)-1)
          SystemSet(SYS_MODELSELECT, SELECT_ALL, 0, FALSE)
          frame++
        temp++
    if(SystemGet(SYS_KEYPRESSED, KEYHOME, 0) || SystemGet(SYS_KEYPRESSED, KEY7, 0))
      SystemSet(SYS_MODELSELECT, SELECT_ALL, 0, FALSE)
      frame = 0
    if(SystemGet(SYS_KEYPRESSED, KEYEND, 0) || SystemGet(SYS_KEYPRESSED, KEY1, 0))
      SystemSet(SYS_MODELSELECT, SELECT_ALL, 0, FALSE)
      frame = SystemGet(SYS_MODELMAXFRAME, openfile, 0)-1
    if(mode == MODE_POINT || mode == MODE_SKIN || mode == MODE_AUTOSHADOW)
      if(mode != MODE_SKIN || skin_border_mode == BORDER_SIMPLE)
        if(SystemGet(SYS_KEYPRESSED, KEYH, 0))
          SystemSet(SYS_MODELHIDE, openfile, frame, TRUE)
        if(SystemGet(SYS_KEYPRESSED, KEYU, 0))
          SystemSet(SYS_MODELHIDE, openfile, frame, FALSE)
    if(mode == MODE_POINT || mode == MODE_SKIN || mode == MODE_SHADOW || mode == MODE_AUTOSHADOW)
      if(SystemGet(SYS_KEYPRESSED, KEYA, 0))
        if(draw_mode != WIN_3D_VERTEX+5)
          SystemSet(SYS_MODELSELECT, SELECT_ALL, 0, TRUE)
      if(SystemGet(SYS_KEYPRESSED, KEYI, 0))
        if(draw_mode != (WIN_3D_VERTEX+5))
          SystemSet(SYS_MODELSELECT, SELECT_INVERT, 0, 0)
      if(SystemGet(SYS_KEYPRESSED, KEYBRACK, 0))
        if(draw_mode != (WIN_3D_VERTEX+5))
          SystemSet(SYS_MODELSELECT, SELECT_CONNECTED, 0, 0)
      if(SystemGet(SYS_KEYPRESSED, KEYN, 0))
        SystemSet(SYS_MODELSELECT, SELECT_ALL, 0, FALSE)



    // Button area, depending on mode...
    SystemSet(SYS_CURRENTITEM, 0, 0, 100)
    if(mode == MODE_POINT)
      // Hotkeys
      if(SystemGet(SYS_KEYPRESSED, KEYB, 0))
        SystemSet(SYS_MODELANCHOR, 0, 0, 0)
      if(SystemGet(SYS_KEYPRESSED, KEYSPACE, 0))
        if(draw_mode == (WIN_3D_VERTEX+1))
          button_one = 255
      if(SystemGet(SYS_KEYPRESSED, KEYDELETE, 0))
        SystemSet(SYS_MODELDELETE, openfile, frame, 0)
      if(SystemGet(SYS_KEYPRESSED, KEYC, 0))
        SystemSet(SYS_MODELCOPYPASTE, openfile, frame, MODEL_COPY)
      if(SystemGet(SYS_KEYPRESSED, KEYV, 0))
        SystemSet(SYS_MODELCOPYPASTE, openfile, frame, MODEL_PASTE+tex_active)
      if(SystemGet(SYS_KEYPRESSED, KEYW, 0))
        SystemSet(SYS_MODELWELDVERTICES, openfile, frame, FALSE)
      if(SystemGet(SYS_KEYPRESSED, KEYG, 0))
        SystemSet(SYS_MODELWELDVERTICES, openfile, frame, TRUE)
      if(SystemGet(SYS_KEYPRESSED, KEYX, 0))
        if(SystemGet(SYS_KEYDOWN, KEYLSHIFT, 0) || SystemGet(SYS_KEYDOWN, KEYRSHIFT, 0))
          SystemSet(SYS_MODELSCALE, openfile, frame, 0)
        else
          SystemSet(SYS_MODELFLIP, openfile, frame, 0)
      if(SystemGet(SYS_KEYPRESSED, KEYY, 0))
        if(SystemGet(SYS_KEYDOWN, KEYLSHIFT, 0) || SystemGet(SYS_KEYDOWN, KEYRSHIFT, 0))
          SystemSet(SYS_MODELSCALE, openfile, frame, 1)
        else
          SystemSet(SYS_MODELFLIP, openfile, frame, 1)
      if(SystemGet(SYS_KEYPRESSED, KEYZ, 0))
        if(SystemGet(SYS_KEYDOWN, KEYLSHIFT, 0) || SystemGet(SYS_KEYDOWN, KEYRSHIFT, 0))
          SystemSet(SYS_MODELSCALE, openfile, frame, 2)
        else
          SystemSet(SYS_MODELFLIP, openfile, frame, 2)
      if(SystemGet(SYS_KEYPRESSED, KEYF, 0))
        SystemSet(SYS_MODELFLIP, openfile, frame, 3)





      // Button actions
      if(button_one == 255)
        if(draw_mode == (WIN_3D_VERTEX+1))
          SystemSet(SYS_MODELPLOP, openfile, frame, 0)
        ClearButtons()
        button_one = 255
        draw_mode = WIN_3D_VERTEX+1
        border_mode = BORDER_CROSS_HAIRS
        ButtonSound()
      if(button_two == 255)
        draw_mode = WIN_3D_VERTEX
        border_mode = BORDER_SELECT
      if(button_three == 255)
        draw_mode = WIN_3D_VERTEX+2
        border_mode = BORDER_MOVE
        move_mode = MOVE_MODE_MOVE
      if(button_four == 255)
        draw_mode = WIN_3D_VERTEX+2
        border_mode = BORDER_MOVE
        move_mode = MOVE_MODE_SCALE
      if(button_five == 255)
        draw_mode = WIN_3D_VERTEX+2
        border_mode = BORDER_MOVE
        move_mode = MOVE_MODE_ROTATE
      if(button_six == 255)
        SystemSet(SYS_MODELSELECT, SELECT_ALL, 0, FALSE)
        draw_mode = WIN_3D_VERTEX+5
        border_mode = BORDER_POINT_PICK
      if(draw_mode == (WIN_3D_VERTEX+5))
        SystemSet(SYS_MODELDELETE, openfile, frame, 0)



      // Button images
      button_one = ButtonImage(button_one, 0.0, 1.0, 14.0, 2.0, "Plop Point")
      button_two = ButtonImage(button_two, 0.0, 3.0, 14.0, 2.0, "Select")
      button_three = ButtonImage(button_three, 0.0, 5.0, 14.0, 2.0, "Move")
      button_four = ButtonImage(button_four, 0.0, 7.0, 14.0, 2.0, "Scale")
      button_five = ButtonImage(button_five, 0.0, 9.0, 14.0, 2.0, "Rotate")
      button_six = ButtonImage(button_six, 0.0, 11.0, 14.0, 2.0, "Delete")


      // Sticky buttons
      button_two = StickyButton(button_two)
      button_three = StickyButton(button_three)
      button_four = StickyButton(button_four)
      button_five = StickyButton(button_five)
      button_six = StickyButton(button_six)


    if(mode == MODE_TRIANGLE)
      // Hotkeys...
      if(SystemGet(SYS_KEYPRESSED, KEYN, 0))
        SystemSet(SYS_MODELSELECT, SELECT_ALL, 0, FALSE)
        strip_stage = 0


      // Button actions
      if(button_one == 255)
        SystemSet(SYS_MODELSELECT, SELECT_ALL, 0, FALSE)
        draw_mode = WIN_3D_VERTEX+5
        border_mode = BORDER_POINT_PICK
      if(button_two == 255)
        SystemSet(SYS_MODELSELECT, SELECT_ALL, 0, FALSE)
        draw_mode = WIN_3D_VERTEX+5
        border_mode = BORDER_POINT_PICK
        strip_stage = 0
      if(button_three == 255)
        SystemSet(SYS_MODELSELECT, SELECT_ALL, 0, FALSE)
        draw_mode = WIN_3D_VERTEX+5
        border_mode = BORDER_POINT_PICK
      if(button_four == 255)
        if(SystemGet(SYS_KEYDOWN, KEYLSHIFT, 0) || SystemGet(SYS_KEYDOWN, KEYRSHIFT, 0))
          SystemSet(SYS_MODELDETEXTURE, openfile, frame, 0)
          ButtonSound()
        else
          DebugMessage("Hold SHIFT if you really want to detexture...")
          BuzzerSound()
      if(button_five == 255)
        SystemSet(SYS_MODELSELECT, SELECT_ALL, 0, FALSE)
        draw_mode = WIN_3D_VERTEX+5
        border_mode = BORDER_POINT_PICK
      if(draw_mode == (WIN_3D_VERTEX+5))
        if(SystemGet(SYS_MODELSELECT, 0, 0) == 3)
          if(button_one > 200)
            SystemSet(SYS_MODELPLOPTRIANGLE, openfile, frame, tex_active)
            SystemSet(SYS_MODELSELECT, SELECT_ALL, 0, FALSE)
          if(button_two > 200)
            if(strip_stage == 0)
              SystemSet(SYS_MODELPLOPTRIANGLE, openfile, frame, tex_active)
              SystemSet(SYS_MODELSELECT, SELECT_REMOVE, 0, 0)
              strip_stage++
            else
              SystemSet(SYS_MODELSELECT, SELECT_SWAP, 1, 2)
              SystemSet(SYS_MODELPLOPTRIANGLE, openfile, frame, tex_active)
              SystemSet(SYS_MODELSELECT, SELECT_REMOVE, 0, 0)
              SystemSet(SYS_MODELSELECT, SELECT_SWAP, 0, 1)
              strip_stage--
          if(button_three > 200)
            SystemSet(SYS_MODELPLOPTRIANGLE, openfile, frame, tex_active)
            SystemSet(SYS_MODELSELECT, SELECT_REMOVE, 0, 1)
          if(button_five > 200)
            SystemSet(SYS_MODELDELETETRIANGLE, openfile, frame, tex_active)
            SystemSet(SYS_MODELSELECT, SELECT_ALL, 0, FALSE)



      // Button images
      button_one = ButtonImage(button_one, 0.0, 1.0, 14.0, 2.0, "Plop Single")
      button_two = ButtonImage(button_two, 0.0, 3.0, 14.0, 2.0, "Plop Strip")
      button_three = ButtonImage(button_three, 0.0, 5.0, 14.0, 2.0, "Plop Fan")
      button_four = ButtonImage(button_four, 0.0, 7.0, 14.0, 2.0, "Detexture")
      button_five = ButtonImage(button_five, 0.0, 9.0, 14.0, 2.0, "Delete")


      // Sticky buttons
      button_one = StickyButton(button_one)
      button_two = StickyButton(button_two)
      button_three = StickyButton(button_three)
      button_five = StickyButton(button_five)

    if(mode == MODE_BONE)
      // Hotkeys
      if(SystemGet(SYS_KEYPRESSED, KEYN, 0))
        SystemSet(SYS_MODELSELECT, SELECT_ALL, 0, FALSE)
      if(SystemGet(SYS_KEYPRESSED, KEYSPACE, 0))
        if(draw_mode == (WIN_3D_VERTEX+6))
          button_one = 255
      if(SystemGet(SYS_KEYPRESSED, KEYC, 0))
        SystemSet(SYS_MODELCENTER, openfile, frame, 0)
        SystemSet(SYS_MODELCENTER, openfile, frame, 1)
      if(SystemGet(SYS_KEYPRESSED, KEYZ, 0))
        if(SystemGet(SYS_KEYDOWN, KEYLSHIFT, 0) || SystemGet(SYS_KEYDOWN, KEYRSHIFT, 0))
          SystemSet(SYS_MODELCENTER, openfile, frame, 3)
        else
          SystemSet(SYS_MODELCENTER, openfile, frame, 2)
      if(SystemGet(SYS_KEYPRESSED, KEYI, 0))
        SystemSet(SYS_MODELINTERPOLATE, openfile, frame, 0)



      // Button actions
      if(button_one == 255)
        if(draw_mode == (WIN_3D_VERTEX+6))
          SystemSet(SYS_MODELPLOPJOINT, openfile, frame, 0)
        ClearButtons()
        button_one = 255
        SystemSet(SYS_MODELSELECT, SELECT_ALL, 0, FALSE)
        draw_mode = WIN_3D_VERTEX+6
        border_mode = BORDER_CROSS_HAIRS
      if(button_two == 255)
        SystemSet(SYS_MODELSELECT, SELECT_ALL, 0, FALSE)
        draw_mode = WIN_3D_VERTEX+7
        border_mode = BORDER_POINT_PICK
      if(button_three == 255)
        SystemSet(SYS_MODELSELECT, SELECT_ALL, 0, FALSE)
        draw_mode = WIN_3D_VERTEX+8
        border_mode = BORDER_POINT_PICK
        move_mode = MOVE_MODE_MOVE
      if(button_four == 255)
        SystemSet(SYS_MODELSELECT, SELECT_ALL, 0, FALSE)
        draw_mode = WIN_3D_VERTEX+9
        border_mode = BORDER_POINT_PICK
      if(button_five == 255)
        SystemSet(SYS_MODELSELECT, SELECT_ALL, 0, FALSE)
        draw_mode = WIN_3D_VERTEX+10
        border_mode = BORDER_POINT_PICK
      if(button_six == 255)
        SystemSet(SYS_MODELSELECT, SELECT_ALL, 0, FALSE)
        draw_mode = WIN_3D_VERTEX+11
        border_mode = BORDER_POINT_PICK
      if(draw_mode == (WIN_3D_VERTEX+7))
        if(SystemGet(SYS_MODELSELECT, 0, 0) == 2)
          SystemSet(SYS_MODELPLOPBONE, openfile, frame, 0)
          SystemSet(SYS_MODELSELECT, SELECT_ALL, 0, FALSE)
      if(draw_mode == (WIN_3D_VERTEX+12)) // Free move mode
        draw_mode = WIN_3D_VERTEX+8
//        SystemSet(SYS_MODELCRUNCH, openfile, 0, 0)
      if(draw_mode == (WIN_3D_VERTEX+8))
        if(SystemGet(SYS_KEYDOWN, KEYF, 0))  // Free move mode
          draw_mode = WIN_3D_VERTEX+12
        if(SystemGet(SYS_MODELSELECT, 0, 0))
          // At least one point is selected, switch over to move mode...
          if(SystemGet(SYS_KEYDOWN, KEYLSHIFT, 0) || SystemGet(SYS_KEYDOWN, KEYRSHIFT, 0))
            // Oh, wait!  Holding down shift means we want multiple joints...
            border_mode = BORDER_POINT_PICK
          else
            border_mode = BORDER_MOVE
        else
          border_mode = BORDER_POINT_PICK

        // New thing to let me rotate...
        move_mode = MOVE_MODE_MOVE
        if(SystemGet(SYS_KEYDOWN, KEYLCTRL, 0) || SystemGet(SYS_KEYDOWN, KEYRCTRL, 0))
          move_mode = MOVE_MODE_ROTATE


        SystemSet(SYS_MODELREGENERATE, openfile, frame, 0)
      if(draw_mode == (WIN_3D_VERTEX+9))
        if(SystemGet(SYS_MODELSELECT, 0, 0) == 1)
          SystemSet(SYS_MODELDELETEJOINT, openfile, frame, 0)
          SystemSet(SYS_MODELSELECT, SELECT_ALL, 0, FALSE)
      if(draw_mode == (WIN_3D_VERTEX+10))
        if(SystemGet(SYS_MODELSELECT, 0, 0) == 2)
          SystemSet(SYS_MODELDELETEBONE, openfile, frame, 0)
          SystemSet(SYS_MODELSELECT, SELECT_ALL, 0, FALSE)



      // Button images
      button_one = ButtonImage(button_one, 0.0, 1.0, 14.0, 2.0, "Plop Joint")
      button_two = ButtonImage(button_two, 0.0, 3.0, 14.0, 2.0, "Plop Bone")
      button_three = ButtonImage(button_three, 0.0, 5.0, 14.0, 2.0, "Move Joint")
      button_four = ButtonImage(button_four, 0.0, 7.0, 14.0, 2.0, "Delete Joint")
      button_five = ButtonImage(button_five, 0.0, 9.0, 14.0, 2.0, "Delete Bone")
      if(button_six > 200)
        button_six = ButtonImage(button_six, 0.0, 11.0, 14.0, 2.0, "")
        joint_size = WindowSlider(1.0, 11.5, 12, 1, joint_size)
        SystemSet(SYS_MODELJOINTSIZE, openfile, frame, joint_size)
      else
        button_six = ButtonImage(button_six, 0.0, 11.0, 14.0, 2.0, "Joint Size")


      // Sticky buttons
      button_one = StickyButton(button_one)
      button_two = StickyButton(button_two)
      button_three = StickyButton(button_three)
      button_four = StickyButton(button_four)
      button_five = StickyButton(button_five)
      button_six = StickyButton(button_six)


    if(mode == MODE_FRAME)
      // Hotkeys...
      if(SystemGet(SYS_KEYPRESSED, KEYC, 0))
        SystemSet(SYS_MODELMARKFRAME, openfile, frame, 0)
//        SystemSet(SYS_MODELMARKFRAME, openfile, frame-32, 0)
      if(SystemGet(SYS_KEYPRESSED, KEYV, 0))
        SystemSet(SYS_MODELCOPYFRAME, openfile, frame, 0)
      if(SystemGet(SYS_KEYPRESSED, KEYI, 0))
        SystemSet(SYS_MODELINTERPOLATE, openfile, frame, 0)




      // Button actions
      if(button_one == 250)
        ButtonSound()
        ClearButtons()
        if(frame > 0)
          frame--
      if(button_two == 250)
        ButtonSound()
        ClearButtons()
        if(frame < SystemGet(SYS_MODELMAXFRAME, openfile, 0)-1)
          frame++
      if(button_three == 250)
        ButtonSound()
        ClearButtons()
        frame = 0
      if(button_four == 250)
        SystemSet(SYS_MODELADDFRAME, openfile, frame, TRUE)
        ClearButtons()
        ButtonSound()
      if(button_five == 254)
        SystemSet(SYS_MODELADDFRAME, openfile, frame, FALSE)
        if(frame >= SystemGet(SYS_MODELMAXFRAME, openfile, 0))
          frame--
        ClearButtons()
        ButtonSound()
      if(button_six > 200)
        // Play action...
        frame_stuff = SystemGet(SYS_MODELFRAMEACTIONNAME, openfile, frame)
        temp = SystemGet(SYS_MAINFRAMESKIP, 0, 0)


        // Slow down animations if shift is down...
        if(SystemGet(SYS_KEYDOWN, KEYLSHIFT, 0) || SystemGet(SYS_KEYDOWN, KEYRSHIFT, 0))
          temp = (temp + frame_slow)
          frame_slow = temp&1
          temp = temp>>1


        while(temp > 0)
          if(frame < SystemGet(SYS_MODELMAXFRAME, openfile, 0)-1)
            frame++
          else
            frame = 0
          if(SystemGet(SYS_MODELFRAMEACTIONNAME, openfile, frame) != frame_stuff)
            frame = SystemGet(SYS_MODELACTIONSTART, openfile, frame_stuff)
            if(frame >= SystemGet(SYS_MODELMAXFRAME, openfile, 0))
              frame = 0
          temp--
      // Button images
      button_one = ButtonImage(button_one, 0.0, 1.0, 2.0, 2.0, "-")
      button_two = ButtonImage(button_two, 12.0, 1.0, 2.0, 2.0, "+")
      StringClear(String(0))
      StringAppendNumber(String(0), frame, 256)
      button_three = ButtonImage(button_three, 2.0, 1.0, 10.0, 2.0, String(0)) 
      button_four = ButtonImage(button_four, 0.0, 3.0, 14.0, 2.0, "Add Frame") 
      button_five = ButtonImage(button_five, 0.0, 5.0, 14.0, 2.0, "Delete Frame") 
      button_six = ButtonImage(button_six, 0.0, 7.0, 14.0, 2.0, "Play Action") 


      // Frame Flags
      frame_stuff = SystemGet(SYS_MODELFRAMEFLAGS, openfile, frame)
      frame_stuff = FlagsHelper(0.0, 9.0, "1EvFt,2Even,4Even,8EvAt,LAttk,RAttk,Block,Combt", frame_stuff, 8)
      SystemSet(SYS_MODELFRAMEFLAGS, openfile, frame, frame_stuff)


      // Action Name
      frame_stuff = SystemGet(SYS_MODELFRAMEACTIONNAME, openfile, frame)
      frame_stuff = ActionHelper(0.0, 10.0, frame_stuff, TRUE)
      SystemSet(SYS_MODELFRAMEACTIONNAME, openfile, frame, frame_stuff)


      // Current base model...
      StringClear(String(0))
      StringAppend(String(0), "Model ", 256)
      frame_stuff = SystemGet(SYS_MODELFRAMEBASEMODEL, openfile, frame)
      StringAppendNumber(String(0), frame_stuff, 256)
      WindowString(WHITE, 7.0-(0.5*(StringLength(String(0)))), 11.0, String(0))
      WindowString(WHITE, 0.0, 11.0, "-")
      WindowString(WHITE, 13.0, 11.0, "+")
      // Change base model down
      if(WindowImage(0.0, 11.0, 1.0, 1.0, NULL, NULL, 0) == 255)
        if(frame_stuff > 0)
          frame_stuff--
          SystemSet(SYS_MODELFRAMEBASEMODEL, openfile, frame, frame_stuff)
      if(WindowImage(13.0, 11.0, 1.0, 1.0, NULL, NULL, 0) == 255)
        if(frame_stuff < 255)
          frame_stuff++
          SystemSet(SYS_MODELFRAMEBASEMODEL, openfile, frame, frame_stuff)


      // Add Base model
      if(ButtonImage(0, 0.0, 12.0, 7.0, 1.0, "AddMod") == 255)
        SystemSet(SYS_MODELADDBASEMODEL, openfile, frame, TRUE)


      // Delete Base model
//      if(ButtonImage(0, 7.0, 12.0, 7.0, 1.0, "DelMod") == 255)
//        frame_stuff = 0
//        while(frame_stuff < 255)
//          SystemSet(SYS_MODELADDBASEMODEL, openfile, frame_stuff, FALSE)
//          frame_stuff++

      button_six = StickyButton(button_six)

    if(mode == MODE_SKIN)
      // Hotkeys
      if(button_six > 200)
        if(SystemGet(SYS_KEYPRESSED, KEYW, 0))
          SystemSet(SYS_MODELWELDTEXVERTICES, openfile, frame, 0)
      if(SystemGet(SYS_KEYPRESSED, KEYX, 0))
        if(SystemGet(SYS_KEYDOWN, KEYLSHIFT, 0) || SystemGet(SYS_KEYDOWN, KEYRSHIFT, 0))
          if(skin_border_mode != BORDER_SIMPLE)
            SystemSet(SYS_MODELTEXSCALE, openfile, frame, 0)
      if(SystemGet(SYS_KEYPRESSED, KEYY, 0))
        if(SystemGet(SYS_KEYDOWN, KEYLSHIFT, 0) || SystemGet(SYS_KEYDOWN, KEYRSHIFT, 0))
          if(skin_border_mode != BORDER_SIMPLE)
            SystemSet(SYS_MODELTEXSCALE, openfile, frame, 1)
      if(SystemGet(SYS_KEYPRESSED, KEYZ, 0))
        if(SystemGet(SYS_KEYDOWN, KEYLSHIFT, 0) || SystemGet(SYS_KEYDOWN, KEYRSHIFT, 0))
          if(skin_border_mode != BORDER_SIMPLE)
            SystemSet(SYS_MODELTEXSCALE, openfile, frame, 2)



      // Button actions
      if(button_two == 255)
        ClearButtons()
        ButtonSound()
        button_one = 255
        button_two = 255
      if(button_one == 255)
        if(skin_border_mode != BORDER_SIMPLE)
          SystemSet(SYS_MODELSELECT, SELECT_ALL, 0, FALSE)
        draw_mode = WIN_3D_VERTEX
        border_mode = BORDER_SELECT
        skin_border_mode = BORDER_SIMPLE
      if(button_three == 255)
        if(skin_border_mode == BORDER_SIMPLE)
          SystemSet(SYS_MODELSELECT, SELECT_ALL, 0, FALSE)
        draw_mode = WIN_3D_VERTEX
        border_mode = BORDER_SIMPLE
        move_mode = MOVE_MODE_MOVE
        skin_border_mode = BORDER_MOVE
      if(button_four == 255)
        if(skin_border_mode == BORDER_SIMPLE)
          SystemSet(SYS_MODELSELECT, SELECT_ALL, 0, FALSE)
        draw_mode = WIN_3D_VERTEX
        border_mode = BORDER_SIMPLE
        move_mode = MOVE_MODE_SCALE
        skin_border_mode = BORDER_MOVE
      if(button_five == 255)
        if(skin_border_mode == BORDER_SIMPLE)
          SystemSet(SYS_MODELSELECT, SELECT_ALL, 0, FALSE)
        draw_mode = WIN_3D_VERTEX
        border_mode = BORDER_SIMPLE
        move_mode = MOVE_MODE_ROTATE
        skin_border_mode = BORDER_MOVE
      if(button_six == 255)
        if(skin_border_mode == BORDER_SIMPLE)
          SystemSet(SYS_MODELSELECT, SELECT_ALL, 0, FALSE)
        draw_mode = WIN_3D_VERTEX
        border_mode = BORDER_SIMPLE
        skin_border_mode = BORDER_SELECT


      // Button images
      button_one = ButtonImage(button_one, 0.0, 1.0, 14.0, 2.0, "Model Select")
      if(SystemGet(SYS_MAINVIDEOFRAME, 0, 0) & 32)
        button_two = ButtonImage(button_two, 0.0, 3.0, 14.0, 2.0, "Clean Up")
      else
        button_two = ButtonImage(button_two, 0.0, 3.0, 14.0, 2.0, "Skin From Cam")
      button_three = ButtonImage(button_three, 0.0, 5.0, 14.0, 2.0, "Move")
      button_four = ButtonImage(button_four, 0.0, 7.0, 14.0, 2.0, "Scale")
      button_five = ButtonImage(button_five, 0.0, 9.0, 14.0, 2.0, "Rotate")
      button_six = ButtonImage(button_six, 0.0, 11.0, 14.0, 2.0, "Skin Select")


      // Sticky buttons
      button_one = StickyButton(button_one)
      button_three = StickyButton(button_three)
      button_four = StickyButton(button_four)
      button_five = StickyButton(button_five)
      button_six = StickyButton(button_six)



    if(mode == MODE_SHADOW)
      // Button actions
      if(button_one == 255)
        SystemSet(SYS_MODELSELECT, SELECT_ALL, 0, FALSE)
        draw_mode = WIN_3D_SHADOW+1
        border_mode = BORDER_SELECT
      if(button_two == 255)
        draw_mode = WIN_3D_SHADOW+1
        border_mode = BORDER_MOVE
        move_mode = MOVE_MODE_MOVE
      if(button_three == 255)
        draw_mode = WIN_3D_SHADOW+1
        border_mode = BORDER_MOVE
        move_mode = MOVE_MODE_SCALE
      if(button_four == 255)
        draw_mode = WIN_3D_SHADOW+1
        border_mode = BORDER_MOVE
        move_mode = MOVE_MODE_ROTATE


      // Button images
      button_one = ButtonImage(button_one, 0.0, 1.0, 14.0, 2.0, "Select")
      button_two = ButtonImage(button_two, 0.0, 3.0, 14.0, 2.0, "Move")
      button_three = ButtonImage(button_three, 0.0, 5.0, 14.0, 2.0, "Scale")
      button_four = ButtonImage(button_four, 0.0, 7.0, 14.0, 2.0, "Rotate")


      // Sticky buttons
      button_one = StickyButton(button_one)
      button_two = StickyButton(button_two)
      button_three = StickyButton(button_three)
      button_four = StickyButton(button_four)


      // Helpers...
      ShadowHelper(0.0, 9.0, 0)
      ShadowHelper(0.0, 10.0, 1)
      ShadowHelper(0.0, 11.0, 2)
      ShadowHelper(0.0, 12.0, 3)
    if(mode == MODE_OTHER)
      // Button actions
      if(button_one == 255)
        SystemSet(SYS_MODELSELECT, SELECT_ALL, 0, FALSE)
        draw_mode = WIN_3D_VERTEX+9
        border_mode = BORDER_POINT_PICK
      if(button_three == 255)
        button_two = 255
      if(button_two == 255)
        SystemSet(SYS_MODELSELECT, SELECT_ALL, 0, FALSE)
        draw_mode = WIN_3D_VERTEX+10
        border_mode = BORDER_POINT_PICK
        bone_rotate = 128
      if(button_four == 255)
        SystemSet(SYS_MODELSELECT, SELECT_ALL, 0, FALSE)
        draw_mode = WIN_3D_VERTEX+13
        border_mode = BORDER_CROSS_HAIRS
      if(button_five == 255)
        SystemSet(SYS_MODELINTERPOLATE, openfile, frame, 0)
        ButtonSound()
      if(button_six == 255)
        SystemSet(SYS_MODELINTERPOLATE, openfile, frame, TRUE)
        ButtonSound()
      if(draw_mode == (WIN_3D_VERTEX+9))
        if(SystemGet(SYS_MODELSELECT, 0, 0) == 2)
          SystemSet(SYS_MODELBONEID, openfile, frame, boneid>>8)
          SystemSet(SYS_MODELSELECT, SELECT_ALL, 0, FALSE)


      // External frame linkage...  For using the anims from another model...
// !!!BAD!!!
// !!!BAD!!!  This seems to cause more trouble than it's worth...
// !!!BAD!!!
//      WindowString(WHITE, 0.0, 7.5, "Link:")
//      if(WindowInput(5.0, 7.5, 9, externalname, -1) == 255)
//        StringAppend(externalname, ".RDY", 16)
//        frame_stuff = FileOpen(externalname, FILE_NORMAL)
//        if(frame_stuff)
//          SystemSet(SYS_MODELEXTERNALFILENAME, openfile, frame_stuff, 0)
//          DebugMessage("Set external frame linkage to be...")
//          DebugMessage(externalname)
//        StringClear(externalname)
//        StringAppend(externalname, SystemGet(SYS_MODELEXTERNALFILENAME, openfile, 0), 16)
// !!!BAD!!!
// !!!BAD!!!
// !!!BAD!!!



      // Button images
      button_four = ButtonImage(button_four, 0.0, 7.0, 14.0, 2.0, "Move Offset")
      button_five = ButtonImage(button_five, 0.0, 9.0, 14.0, 2.0, "Interpolate")
      button_six = ButtonImage(button_six, 0.0, 11.0, 14.0, 2.0, "Shadow Reset")
      if(button_two > 200)
        button_two = ButtonImage(button_two, 0.0, 3.0, 14.0, 2.0, "")
        bone_rotate = WindowSlider(1.0, 3.5, 12.0, 1.0, bone_rotate)
        button_three = ButtonImage(button_three, 0.0, 5.0, 14.0, 2.0, "Apply to All")
        if(button_three == 255)
          temp = 1
          frame_stuff = SystemGet(SYS_MODELMAXFRAME, openfile, 0)
        else
          temp = frame
          frame_stuff = frame+1
        while(temp < frame_stuff)
          if(PRECISE_BONE_ROTATE)
            SystemSet(SYS_MODELROTATEBONES, openfile, temp, (bone_rotate>>2)+128+96)
          else
            SystemSet(SYS_MODELROTATEBONES, openfile, temp, bone_rotate+128)
//          Window3DModel(WIN_3D_BONE_UPDATE+1, MODEL_BASE_FILE, temp, main_alpha)  // Force update
//          SystemSet(SYS_MODELREGENERATE, openfile, temp, 0)
          temp++
      else
        button_two = ButtonImage(button_two, 0.0, 3.0, 14.0, 2.0, "Bone Rotate")
        button_three = 0
      if(button_one > 200)
        button_one = ButtonImage(button_one, 0.0, 1.0, 14.0, 2.0, "")
        boneid = WindowMiniList(1.0, 1.5, 12, 6, boneid, "Simple Bone,Left,Right,Left2,Right2,Saddle")
      else
        button_one = ButtonImage(button_one, 0.0, 1.0, 14.0, 2.0, "BoneID")


      // Sticky buttons
      button_one = StickyButton(button_one)
      button_two = StickyButton(button_two)
      button_four = StickyButton(button_four)
    if(mode == MODE_FUNKY)
      // Button actions
      if(button_one == 255)
        temp = frame
        frame = 1
        while(frame < SystemGet(SYS_MODELMAXFRAME, openfile, 0))
          GnomifyEffect()
          frame++
        frame = temp
        ButtonSound()
      if(button_two == 255)
        temp = 1
        while(temp < SystemGet(SYS_MODELMAXFRAME, openfile, 0))
          Window3DModel(WIN_3D_BONE_UPDATE+1, MODEL_BASE_FILE, temp, main_alpha)
          SystemSet(SYS_JOINTFROMVERTEX, openfile, temp, 0)
          Window3DModel(WIN_3D_BONE_UPDATE+1, MODEL_BASE_FILE, temp, main_alpha)
          SystemSet(SYS_MODELREGENERATE, openfile, temp, 0)
          temp++
        ButtonSound()
        Window3DModel(WIN_3D_BONE_UPDATE+1, MODEL_BASE_FILE, frame, main_alpha)




      // Button images
      button_one = ButtonImage(button_one, 0.0, 1.0, 14.0, 2.0, "G'nomify")
      button_two = ButtonImage(button_two, 0.0, 3.0, 14.0, 2.0, "Vertex->Joint")




    if(mode == MODE_AUTOSHADOW)
      // Button actions
      SystemSet(SYS_MODELAUTOVERTEX, 0, 0, shadvert)
      if(button_one == 255)
        draw_mode = WIN_3D_VERTEX
        border_mode = BORDER_SELECT
        ButtonSound()
      if(button_two == 255)
        AutoShadow(0)
        ButtonSound()
      if(button_three == 255)
        AutoShadow(1)
        ButtonSound()
      if(button_four == 255)
        AutoShadow(2)
        ButtonSound()
      if(button_five == 255)
        AutoShadow(3)
        ButtonSound()
      if(button_six == 255)
        shadvert++
        if(shadvert > 4)
          shadvert = 0
        ButtonSound()


      // Button images
      button_one   = ButtonImage(button_one,   0.0, 1.0, 14.0, 2.0, "Select Group")
      button_two   = ButtonImage(button_two,   0.0, 3.0, 14.0, 2.0, "Attach Shad 0")
      button_three = ButtonImage(button_three, 0.0, 5.0, 14.0, 2.0, "Attach Shad 1")
      button_four  = ButtonImage(button_four,  0.0, 7.0, 14.0, 2.0, "Attach Shad 2")
      button_five  = ButtonImage(button_five,  0.0, 9.0, 14.0, 2.0, "Attach Shad 3")

      StringClear(String(0))
      if(shadvert < 4)
        StringAppendNumber(String(0), shadvert, 255)
      else
        StringAppend(String(0), "All", 255)
      button_six  = ButtonImage(button_six,  0.0,11.0, 14.0, 2.0, String(0))


      // Sticky buttons
      button_one = StickyButton(button_one)
    SystemSet(SYS_CURRENTITEM, 0, 0, 200)








    // Mode selection
    WindowString(WHITE, 0.0, 0.0, "Mode:")
    pick_mode = WindowMiniList(5.0, 0.0, 9, 9, pick_mode, "Point,Triangle,Bone,Frame,Skin,Shadow,Other,Funky,Autoshad")
    if((pick_mode >> 8) != mode)
      ClearButtons()
      SystemSet(SYS_MODELSELECT, SELECT_ALL, 0, FALSE)
      draw_mode = WIN_3D_VERTEX
      strip_stage = 0
      skin_border_mode = BORDER_SIMPLE
      if((pick_mode >> 8) != MODE_FRAME && (pick_mode >> 8) != MODE_FUNKY)
        button_one = 255




    // Upper side window
    WindowBorder(FALSE, -20.5, -15.25, 14, 7, BORDER_FULL)
    part_offset = (part*24)+MODEL_BASE_FILE
    if(part != 0)
      WindowString(WHITE, 0.0, 6.0, "File:")
      if(WindowInput(5.0, 6.0, 9, partname, -1)==255)
        StringClear("FILE:MODSCRAP.DAT"+((part_offset-MODEL_BASE_FILE)<<2))
        StringAppend("FILE:MODSCRAP.DAT"+((part_offset-MODEL_BASE_FILE)<<2), partname, 16)
        StringAppend("FILE:MODSCRAP.DAT"+((part_offset-MODEL_BASE_FILE)<<2), ".RDY", 16)
        ScrapAssign(part_offset)
    else
      tex_alpha = SystemGet(SYS_MODELTEXFLAGSALPHA, openfile, frame + (tex_active<<16))
      tex_flags = tex_alpha >> 8
      tex_alpha = WindowSlider(8.0, 6.0, 6, 1, tex_alpha&255)
      tex_flags = FlagsHelper(0.0, 6.0, "Light,Color,NoCul,Shiny,Anime,EyeQd,NoLin,Paper", tex_flags, 8)
      SystemSet(SYS_MODELTEXFLAGSALPHA, openfile, frame, (tex_active<<16) + (tex_flags<<8) + tex_alpha)
    WindowString(WHITE, 0.0, 5.0, "Color:")
    pick_color = WindowMiniList(6.0, 5.0, 8, 6, pick_color, "Red,Yellow,Green,Blue,White,Black")
    if((pick_color>>8) == 0)
      ScrapColor(part_offset, RED)
    if((pick_color>>8) == 1)
      ScrapColor(part_offset, YELLOW)
    if((pick_color>>8) == 2)
      ScrapColor(part_offset, GREEN)
    if((pick_color>>8) == 3)
      ScrapColor(part_offset, BLUE)
    if((pick_color>>8) == 4)
      ScrapColor(part_offset, WHITE)
    if((pick_color>>8) == 5)
      ScrapColor(part_offset, BLACK)
    if(working_on_tile)
      if(tex_active == 3)
        WindowString(GREEN, 0.0, 4.0, "XXX3:")
      else
        WindowString(WHITE, 0.0, 4.0, "XXX3:")
    else
      if(tex_active == 3)
        WindowString(RED, 0.0, 4.0, "Tex3:")
      else
        WindowString(WHITE, 0.0, 4.0, "Tex3:")
    if(WindowInput(5.0, 4.0, 9, tex3name, -2) == 255)
      frame_stuff = "FILE:MODSCRAP.DAT" + ((part_offset - MODEL_BASE_FILE)<<2) + 64
      StringClear(frame_stuff)
      StringAppend(frame_stuff, tex3name, 256)
      StringAppend(frame_stuff, ".RGB", 256)
      texfile3 = FileOpen(frame_stuff, FILE_NORMAL)
      ScrapAssign(part_offset)
      tex_active = 3
    if(tex_active == 2)
      WindowString(RED, 0.0, 3.0, "Tex2:")
    else
      WindowString(WHITE, 0.0, 3.0, "Tex2:")
    if(WindowInput(5.0, 3.0, 9, tex2name, -1) == 255)
      frame_stuff = "FILE:MODSCRAP.DAT" + ((part_offset - MODEL_BASE_FILE)<<2) + 48
      StringClear(frame_stuff)
      StringAppend(frame_stuff, tex2name, 256)
      StringAppend(frame_stuff, ".RGB", 256)
      texfile2 = FileOpen(frame_stuff, FILE_NORMAL)
      ScrapAssign(part_offset)
      tex_active = 2
    if(tex_active == 1)
      WindowString(RED, 0.0, 2.0, "Tex1:")
    else
      WindowString(WHITE, 0.0, 2.0, "Tex1:")
    if(WindowInput(5.0, 2.0, 9, tex1name, -1) == 255)
      frame_stuff = "FILE:MODSCRAP.DAT" + ((part_offset - MODEL_BASE_FILE)<<2) + 32
      StringClear(frame_stuff)
      StringAppend(frame_stuff, tex1name, 256)
      StringAppend(frame_stuff, ".RGB", 256)
      texfile1 = FileOpen(frame_stuff, FILE_NORMAL)
      ScrapAssign(part_offset)
      tex_active = 1
    if(tex_active == 0)
      WindowString(RED, 0.0, 1.0, "Tex0:")
    else
      WindowString(WHITE, 0.0, 1.0, "Tex0:")
    if(WindowInput(5.0, 1.0, 9, tex0name, -1) == 255)
      frame_stuff = "FILE:MODSCRAP.DAT" + ((part_offset - MODEL_BASE_FILE)<<2) + 16
      StringClear(frame_stuff)
      StringAppend(frame_stuff, tex0name, 256)
      StringAppend(frame_stuff, ".RGB", 256)
      texfile0 = FileOpen(frame_stuff, FILE_NORMAL)
      ScrapAssign(part_offset)
      tex_active = 0
    WindowString(WHITE, 0.0, 0.0, "Part:")
    pick_part = WindowMiniList(5.0, 0.0, 9, 15, pick_part, "Base,Legs,Chest,Arms,Pads,Feet,Head,Hair,Eyes,Mouth,Rider,L Wep 1,R Wep 1,L Wep 2,R Wep 2")
    if((pick_part>>8) != part)
      part_offset = ((pick_part>>8)*24)+MODEL_BASE_FILE
      ScrapUpdate(part_offset)


    // Lower window
    WindowBorder(FALSE, -3.75, 12.75, 23,  3, BORDER_LOW_TITLE)
    if(mode == MODE_OTHER)
      StringClear(String(0))
      StringAppend(String(0), "Movement=", 256)
      StringAppendNumber(String(0), SystemGet(SYS_MODELFRAMEOFFSETX, openfile, frame), 256)
      StringAppend(String(0), ", ", 256)
      StringAppendNumber(String(0), SystemGet(SYS_MODELFRAMEOFFSETY, openfile, frame), 256)
    else
      StringClear(String(0))
      StringAppend(String(0), "Selected=", 256)
      StringAppendNumber(String(0), SystemGet(SYS_MODELSELECT, 0, 0), 256)
      StringAppend(String(0), ", Tri=", 256)
      StringAppendNumber(String(0), SystemGet(SYS_MODELNUMTRIANGLE, openfile, frame), 256)
    WindowString(WHITE, 0.0, 0.25, String(0))



    // Second line of lower window
    StringClear(String(0))
    StringAppendNumber(String(0), frame, 256)
    WindowString(WHITE, 0.0, 1.25, String(0))
    frame_stuff = SystemGet(SYS_MODELFRAMEACTIONNAME, openfile, frame)
    ActionHelper(4.0, 1.25, frame_stuff, FALSE)


    // Third line of lower window
    StringClear(String(0))
    StringAppend(String(0), "Lines = ", 256)
    StringAppendNumber(String(0), SystemGet(SYS_MODELNUMCARTOONLINE, openfile, frame), 256)
    WindowString(WHITE, 0.0, 2.25, String(0))



    // Turn off billboard vertices for boning frames, so it saves correctly...
    if(frame_stuff == ACTION_BONING)
      SystemSet(SYS_BILLBOARDACTIVE, 0, 0, FALSE)





    // Figure out where the camera really is
    cx = sin((camspinx * 360) >> 16)
    camspinx = camspinx+16384
    cy = sin((camspinx * 360) >> 16)
    camspinx = camspinx-16384
    cz = sin((camspiny * 360) >> 16)
    cx = cx * cz
    cy = cy * cz
    camspiny = camspiny+16384
    cz = sin((camspiny * 360) >> 16)
    camspiny = camspiny-16384
    tx = (tarx-32768) * 0.01
    ty = (tary-32768) * 0.01
    tz = (tarz-32768) * 0.01
    // cx,cy,cz is the offset vector from the target...


    // Select type of movement
    SystemSet(SYS_MODELMOVE, 0, 0, move_mode)



    // Top left window
    if(mode != MODE_SKIN || skin_border_mode == BORDER_SIMPLE)
      SystemSet(SYS_MODELVIEW, 0, 0, VIEW_TOP_XY)
      WindowBorder(border_mode, -5.0, -13.5, 12, 12, BORDER_BOX)
      Window3DStart(0.0, 0.0, 12.0, 12.0, FALSE)
      Window3DPosition(tx*zoom, ty*zoom, 0.0, WIN_TARGET)
      Window3DPosition(tx*zoom, ty*zoom, 40.0, WIN_CAMERA)
      Window3DPosition(2.0, 2.0, 300.0, WIN_ORTHO)
      Window3DPosition(zoom, zoom, zoom, WIN_SCALE)
      Window3DModel(WIN_3D_BONE, MODEL_BASE_FILE, frame, main_alpha)
      Window3DModel(WIN_3D_MODEL_EDIT, MODEL_BASE_FILE, frame, main_alpha)
      Window3DModel(draw_mode, MODEL_BASE_FILE, frame, main_alpha)
      if(mode != MODE_OTHER)
        Window3DModel(WIN_3D_AXIS, MODEL_BASE_FILE, frame, main_alpha)
      Window3DPosition(frustumx, frustumy, 500.0, WIN_FRUSTUM)
      Window3DEnd()
      WindowString(WHITE, 0.0, 0.0, "Top")
    else
      // Skinning window
      WindowBorder(border_mode, -5.0, -13.5, 12, 12, BORDER_BOX)
      WindowBorder(border_mode, -5.0, 0.0, 12, 12, BORDER_BOX)
      WindowBorder(border_mode, 8.5, 0.0, 12, 12, BORDER_BOX)
      WindowBorder(border_mode, 8.5, -13.5, 12, 12, BORDER_BOX)
      WindowBorder(skin_border_mode, -4.75, -13.25, 25, 25, BORDER_BOX)
      WindowMegaImage(0.0,0.0,  25.0,0.0,  25.0,25.0,  0.0,25.0,  0.0,0.0,  1.0,1.0,  WHITE, ALPHA_NONE, NULL)
      if(tex_active == 0)
        WindowMegaImage(0.0,0.0,  25.0,0.0,  25.0,25.0,  0.0,25.0,  0.0,0.0,  1.0,1.0,  WHITE, ALPHA_NONE, texfile0)
      if(tex_active == 1)
        WindowMegaImage(0.0,0.0,  25.0,0.0,  25.0,25.0,  0.0,25.0,  0.0,0.0,  1.0,1.0,  WHITE, ALPHA_NONE, texfile1)
      if(tex_active == 2)
        WindowMegaImage(0.0,0.0,  25.0,0.0,  25.0,25.0,  0.0,25.0,  0.0,0.0,  1.0,1.0,  WHITE, ALPHA_NONE, texfile2)
      if(tex_active == 3)
        WindowMegaImage(0.0,0.0,  25.0,0.0,  25.0,25.0,  0.0,25.0,  0.0,0.0,  1.0,1.0,  WHITE, ALPHA_NONE, texfile3)
      Window3DModel(WIN_3D_TEXVERTEX, MODEL_BASE_FILE, frame, tex_active)




    // Camera movement
    if(mode != MODE_SKIN || skin_border_mode == BORDER_SIMPLE)
      curx = SystemGet(SYS_CURSORPOS, 0, 0)
      cury = SystemGet(SYS_CURSORPOS, 0, 1)
      if(oldx > 0 && oldy > 0 && oldx < 2500 && oldy < 2500)
        if(SystemGet(SYS_CURSORBUTTONDOWN, 0, 1) || SystemGet(SYS_CURSORBUTTONDOWN, 0, 2))
          if(oldx < 1250)
            if(oldy < 1250)
              tarx = tarx - ((curx - oldx) * 0.35 / zoom)
              tary = tary - ((cury - oldy) * 0.35 / zoom)
            else
              tarx = tarx - ((curx - oldx) * 0.35 / zoom)
              tarz = tarz + ((cury - oldy) * 0.35 / zoom)
          else
            if(oldy < 1250)
              camspinx = camspinx - ((curx - oldx) * 50)
              temp = camspiny + ((cury - oldy) * 50)
              if(temp < 33500)
                temp = 33500
              if(temp > 65535)
                temp = 65535
              camspiny = temp
            else
              tary = tary + ((curx - oldx) * 0.35 / zoom)
              tarz = tarz + ((cury - oldy) * 0.35 / zoom)
      oldx = curx
      oldy = cury


    // Bottom left window
    if(mode != MODE_SKIN || skin_border_mode == BORDER_SIMPLE)
      // Normal frontal view
      SystemSet(SYS_MODELVIEW, 0, 0, VIEW_FRONT_XZ)
      WindowBorder(border_mode, -5.0, 0.0, 12, 12, BORDER_BOX)
      Window3DStart(0.0, 0.0, 12.0, 12.0, FALSE)
      Window3DPosition(tx*zoom, 0.0, tz*zoom, WIN_TARGET)
      Window3DPosition(tx*zoom, 40.0, tz*zoom, WIN_CAMERA)
      Window3DPosition(2.0, 2.0, 300.0, WIN_ORTHO)
      Window3DPosition(zoom, zoom, zoom, WIN_SCALE)
      Window3DModel(WIN_3D_BONE, MODEL_BASE_FILE, frame, main_alpha)
      Window3DModel(WIN_3D_MODEL_EDIT, MODEL_BASE_FILE, frame, main_alpha)
      Window3DModel(draw_mode, MODEL_BASE_FILE, frame, main_alpha)
      if(mode != MODE_OTHER)
        Window3DModel(WIN_3D_AXIS, MODEL_BASE_FILE, frame, main_alpha)
      Window3DPosition(frustumx, frustumy, 500.0, WIN_FRUSTUM)
      Window3DEnd()
      WindowString(WHITE, 0.0, 0.0, "Front")




    // Bottom right window
    if(mode != MODE_SKIN || skin_border_mode == BORDER_SIMPLE)
      SystemSet(SYS_MODELVIEW, 0, 0, VIEW_SIDE_YZ)
      WindowBorder(border_mode, 8.5, 0.0, 12, 12, BORDER_BOX)
      Window3DStart(0.0, 0.0, 12.0, 12.0, FALSE)
      Window3DPosition(0.0, ty*zoom, tz*zoom, WIN_TARGET)
      Window3DPosition(40.0, ty*zoom, tz*zoom, WIN_CAMERA)
      Window3DPosition(2.0, 2.0, 300.0, WIN_ORTHO)
      Window3DPosition(zoom, zoom, zoom, WIN_SCALE)
      Window3DModel(WIN_3D_BONE, MODEL_BASE_FILE, frame, main_alpha)
      Window3DModel(WIN_3D_MODEL_EDIT, MODEL_BASE_FILE, frame, main_alpha)
      Window3DModel(draw_mode, MODEL_BASE_FILE, frame, main_alpha)
      if(mode != MODE_OTHER)
        Window3DModel(WIN_3D_AXIS, MODEL_BASE_FILE, frame, main_alpha)
      Window3DPosition(frustumx, frustumy, 500.0, WIN_FRUSTUM)
      Window3DEnd()
      WindowString(WHITE, 0.0, 0.0, "Side")



    // Top right window
    if(mode != MODE_SKIN || skin_border_mode == BORDER_SIMPLE)
      SystemSet(SYS_MODELVIEW, 0, 0, VIEW_3D_XYZ)
      WindowBorder(border_mode, 8.5, -13.5, 12, 12, BORDER_BOX)
      if(SystemGet(SYS_KEYDOWN, KEYF12, 0))
        WindowMegaImage(0.0,0.0,   6.0,0.0,   6.0,12.0,  0.0,12.0,  0.01,0.0,  1.0,1.0,  ITEM_YELLOW, ALPHA_NONE, NULL)
        WindowMegaImage(6.0,0.0,  12.0,0.0,  12.0,12.0,  6.0,12.0,  0.01,0.0,  1.0,1.0,  ITEM_BROWN,  ALPHA_NONE, NULL)
      Window3DStart(0.0, 0.0, 12.0, 12.0, FALSE)
      Window3DPosition(tx*zoom, ty*zoom, tz*zoom, WIN_TARGET)
      Window3DPosition(cx+(tx*zoom), cy+(ty*zoom), cz+(tz*zoom), WIN_CAMERA)
      Window3DPosition(zoom, zoom, zoom, WIN_SCALE)
      Window3DPosition(0.4, 0.4, 500.0, WIN_FRUSTUM)
      Window3DModel(WIN_3D_SHADOW, MODEL_BASE_FILE, frame, main_alpha)
      if(!SystemGet(SYS_KEYDOWN, KEYF12, 0))
        Window3DModel(draw_mode, MODEL_BASE_FILE, frame, main_alpha)
        Window3DModel(WIN_3D_BONE, MODEL_BASE_FILE, frame, main_alpha)
      Window3DModel(WIN_3D_MODEL_EDIT, MODEL_BASE_FILE, frame, main_alpha)
      // Attached and overlapping parts
      Window3DModel(WIN_3D_MODEL, MODEL_LEGS_FILE, 0, main_alpha)
      Window3DModel(WIN_3D_MODEL, MODEL_CHEST_FILE, 0, main_alpha)
      Window3DModel(WIN_3D_MODEL, MODEL_ARMS_FILE, 0, main_alpha)
      Window3DModel(WIN_3D_MODEL, MODEL_PADS_FILE, 0, main_alpha)
      Window3DModel(WIN_3D_MODEL, MODEL_FEET_FILE, 0, main_alpha)
      Window3DModel(WIN_3D_MODEL, MODEL_HEAD_FILE, 0, main_alpha)
      Window3DModel(WIN_3D_MODEL, MODEL_HAIR_FILE, 0, main_alpha)
      Window3DModel(WIN_3D_MODEL, MODEL_EYES_FILE, 0, main_alpha)
      Window3DModel(WIN_3D_MODEL, MODEL_MOUTH_FILE, 0, main_alpha)

      Window3DModel(WIN_3D_MODEL_EDIT, MODEL_BASE_FILE, frame, main_alpha)

      weapon_frame = SystemGet(SYS_MODELFRAMEFLAGS, openfile, frame) >> 7
      Window3DModel(WIN_3D_MODEL, MODEL_LEFT_FILE, weapon_frame, main_alpha)
      Window3DModel(WIN_3D_MODEL, MODEL_RIGHT_FILE, weapon_frame, main_alpha)
      Window3DModel(WIN_3D_MODEL, MODEL_LEFT2_FILE, weapon_frame, main_alpha)
      Window3DModel(WIN_3D_MODEL, MODEL_RIGHT2_FILE, weapon_frame, main_alpha)
      Window3DModel(WIN_3D_MODEL, MODEL_RIDER_FILE, 0, main_alpha)

      if(!SystemGet(SYS_KEYDOWN, KEYF12, 0))
        if(mode != MODE_OTHER)
          Window3DModel(WIN_3D_AXIS, MODEL_BASE_FILE, frame, main_alpha)
      // Skin from camera button...
      if(mode == MODE_SKIN)
        if(button_two == 255)
          Window3DModel(WIN_3D_SKIN_FROM_CAMERA+(tex_active&3), MODEL_BASE_FILE, frame, main_alpha)
          ClearButtons()
          skin_border_mode = BORDER_MOVE
          button_three = 255
      Window3DPosition(frustumx, frustumy, 500.0, WIN_FRUSTUM)
      Window3DEnd()
      if(!SystemGet(SYS_KEYDOWN, KEYF12, 0))
        WindowString(WHITE, 0.0, 0.0, "3D")



    // Update the model to the current bone animation
    if(mode == MODE_POINT)
      if(draw_mode == (WIN_3D_VERTEX+1))
        StringClear(DEBUG_STRING)
        SystemSet(SYS_MODELPLOPATSTRING, 0, 0, 0)
      else
        if(SystemGet(SYS_KEYDOWN, KEYLSHIFT, 0) || SystemGet(SYS_KEYDOWN, KEYRSHIFT, 0))
          StringClear(DEBUG_STRING)
          door_value = 3.5*frame/15.0
          StringAppend(DEBUG_STRING, NAME_STRING, 256)
          StringAppend(DEBUG_STRING, ", ", 256)
          StringAppendNumber(DEBUG_STRING, door_value*100.0, 256)
        else
          if(move_mode != MOVE_MODE_ROTATE)
            StringClear(DEBUG_STRING)
            StringAppend(DEBUG_STRING, "C=Copy,V=Paste,W=Weld,XYZF=Flip,G=Glue", 256)
    if(mode == MODE_TRIANGLE)
      StringClear(DEBUG_STRING)
    if(mode == MODE_BONE)
      StringClear(DEBUG_STRING)
      StringAppend(DEBUG_STRING, "Hold X for mirror plop, C for center", 256)
    if(mode == MODE_FRAME)
      StringClear(DEBUG_STRING)
      StringAppend(DEBUG_STRING, "C=Copy,V=Paste,I=Interpolate,Shift=Slow", 256)
    if(mode == MODE_SKIN)
      StringClear(DEBUG_STRING)
      if(button_six > 200)
        StringAppend(DEBUG_STRING, "W=Weld", 256)
    if(mode == MODE_SHADOW)
      StringClear(DEBUG_STRING)
    if(mode == MODE_OTHER)
      StringClear(DEBUG_STRING)
      StringAppend(DEBUG_STRING, "Rotate = ", 256)
      if(PRECISE_BONE_ROTATE)
        StringAppendNumber(DEBUG_STRING, (bone_rotate-128)*1.40625*0.25, 256)
      else
        StringAppendNumber(DEBUG_STRING, (bone_rotate-128)*1.40625, 256)
    if(mode == MODE_FUNKY)
      StringClear(DEBUG_STRING)
      StringAppend(DEBUG_STRING, "Funky stuff is slightly un-intuitive...", 256)
    if(mode == MODE_AUTOSHADOW)
      StringClear(DEBUG_STRING)
    if(draw_mode == (WIN_3D_VERTEX+8))
      Window3DModel(WIN_3D_BONE_UPDATE+1, MODEL_BASE_FILE, frame, main_alpha)  // Force update
      StringClear(DEBUG_STRING)
      StringAppend(DEBUG_STRING, "F=Free Move,SHIFT=Multiple,CTRL=Rotate", 256)
    else
      if(draw_mode == (WIN_3D_VERTEX+12))
        Window3DModel(WIN_3D_BONE_UPDATE+1, MODEL_BASE_FILE, frame, main_alpha)  // Force update
        StringClear(DEBUG_STRING)
        StringAppend(DEBUG_STRING, "F=Free Move (ACTIVE)", 256)
      Window3DModel(WIN_3D_BONE_UPDATE, MODEL_BASE_FILE, frame, main_alpha)




    // Bone rotation undo stuff
    if(mode == MODE_OTHER)
      if(draw_mode == (WIN_3D_VERTEX+10))
        if(button_one != 255 && button_three != 255 && button_four != 255 && button_five != 255 && button_six != 255)
          SystemSet(SYS_MODELUNROTATEBONES, openfile, frame, 0)


    // Set the frustum thing correctly...
    Window3DPosition(frustumx, frustumy, 500.0, WIN_FRUSTUM)


    // Turn billboard stuff back on...
    SystemSet(SYS_BILLBOARDACTIVE, 0, 0, TRUE)

//-----------------------------------------------------------------------
